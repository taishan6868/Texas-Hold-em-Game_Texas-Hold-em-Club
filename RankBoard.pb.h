// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: RankBoard.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_RankBoard_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_RankBoard_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_RankBoard_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_RankBoard_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[6]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_RankBoard_2eproto;
namespace RankBoardProto {
class FriendAIRankItem;
class FriendAIRankItemDefaultTypeInternal;
extern FriendAIRankItemDefaultTypeInternal _FriendAIRankItem_default_instance_;
class QueryAIBaseInfoResp;
class QueryAIBaseInfoRespDefaultTypeInternal;
extern QueryAIBaseInfoRespDefaultTypeInternal _QueryAIBaseInfoResp_default_instance_;
class QueryFriendAIRankInfoResp;
class QueryFriendAIRankInfoRespDefaultTypeInternal;
extern QueryFriendAIRankInfoRespDefaultTypeInternal _QueryFriendAIRankInfoResp_default_instance_;
class QueryRankInfoReq;
class QueryRankInfoReqDefaultTypeInternal;
extern QueryRankInfoReqDefaultTypeInternal _QueryRankInfoReq_default_instance_;
class QueryRankInfoResp;
class QueryRankInfoRespDefaultTypeInternal;
extern QueryRankInfoRespDefaultTypeInternal _QueryRankInfoResp_default_instance_;
class RankItem;
class RankItemDefaultTypeInternal;
extern RankItemDefaultTypeInternal _RankItem_default_instance_;
}  // namespace RankBoardProto
PROTOBUF_NAMESPACE_OPEN
template<> ::RankBoardProto::FriendAIRankItem* Arena::CreateMaybeMessage<::RankBoardProto::FriendAIRankItem>(Arena*);
template<> ::RankBoardProto::QueryAIBaseInfoResp* Arena::CreateMaybeMessage<::RankBoardProto::QueryAIBaseInfoResp>(Arena*);
template<> ::RankBoardProto::QueryFriendAIRankInfoResp* Arena::CreateMaybeMessage<::RankBoardProto::QueryFriendAIRankInfoResp>(Arena*);
template<> ::RankBoardProto::QueryRankInfoReq* Arena::CreateMaybeMessage<::RankBoardProto::QueryRankInfoReq>(Arena*);
template<> ::RankBoardProto::QueryRankInfoResp* Arena::CreateMaybeMessage<::RankBoardProto::QueryRankInfoResp>(Arena*);
template<> ::RankBoardProto::RankItem* Arena::CreateMaybeMessage<::RankBoardProto::RankItem>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace RankBoardProto {

enum E_RANK_SEASON_TYPE : int {
  E_SEASON_NONE = 0,
  E_SEASON_NOW = 1,
  E_SEASON_LAST = 2,
  E_RANK_SEASON_TYPE_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  E_RANK_SEASON_TYPE_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool E_RANK_SEASON_TYPE_IsValid(int value);
constexpr E_RANK_SEASON_TYPE E_RANK_SEASON_TYPE_MIN = E_SEASON_NONE;
constexpr E_RANK_SEASON_TYPE E_RANK_SEASON_TYPE_MAX = E_SEASON_LAST;
constexpr int E_RANK_SEASON_TYPE_ARRAYSIZE = E_RANK_SEASON_TYPE_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* E_RANK_SEASON_TYPE_descriptor();
template<typename T>
inline const std::string& E_RANK_SEASON_TYPE_Name(T enum_t_value) {
  static_assert(::std::is_same<T, E_RANK_SEASON_TYPE>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function E_RANK_SEASON_TYPE_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    E_RANK_SEASON_TYPE_descriptor(), enum_t_value);
}
inline bool E_RANK_SEASON_TYPE_Parse(
    const std::string& name, E_RANK_SEASON_TYPE* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<E_RANK_SEASON_TYPE>(
    E_RANK_SEASON_TYPE_descriptor(), name, value);
}
// ===================================================================

class QueryRankInfoReq :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:RankBoardProto.QueryRankInfoReq) */ {
 public:
  QueryRankInfoReq();
  virtual ~QueryRankInfoReq();

  QueryRankInfoReq(const QueryRankInfoReq& from);
  QueryRankInfoReq(QueryRankInfoReq&& from) noexcept
    : QueryRankInfoReq() {
    *this = ::std::move(from);
  }

  inline QueryRankInfoReq& operator=(const QueryRankInfoReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryRankInfoReq& operator=(QueryRankInfoReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const QueryRankInfoReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const QueryRankInfoReq* internal_default_instance() {
    return reinterpret_cast<const QueryRankInfoReq*>(
               &_QueryRankInfoReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(QueryRankInfoReq& a, QueryRankInfoReq& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryRankInfoReq* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline QueryRankInfoReq* New() const final {
    return CreateMaybeMessage<QueryRankInfoReq>(nullptr);
  }

  QueryRankInfoReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<QueryRankInfoReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const QueryRankInfoReq& from);
  void MergeFrom(const QueryRankInfoReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryRankInfoReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "RankBoardProto.QueryRankInfoReq";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_RankBoard_2eproto);
    return ::descriptor_table_RankBoard_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
    kAreaIdFieldNumber = 2,
    kSeasonTypeFieldNumber = 3,
  };
  // sint32 type = 1;
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::int32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::int32 value);

  // sint32 areaId = 2;
  void clear_areaid();
  ::PROTOBUF_NAMESPACE_ID::int32 areaid() const;
  void set_areaid(::PROTOBUF_NAMESPACE_ID::int32 value);

  // .RankBoardProto.E_RANK_SEASON_TYPE seasonType = 3;
  void clear_seasontype();
  ::RankBoardProto::E_RANK_SEASON_TYPE seasontype() const;
  void set_seasontype(::RankBoardProto::E_RANK_SEASON_TYPE value);

  // @@protoc_insertion_point(class_scope:RankBoardProto.QueryRankInfoReq)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 type_;
  ::PROTOBUF_NAMESPACE_ID::int32 areaid_;
  int seasontype_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_RankBoard_2eproto;
};
// -------------------------------------------------------------------

class RankItem :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:RankBoardProto.RankItem) */ {
 public:
  RankItem();
  virtual ~RankItem();

  RankItem(const RankItem& from);
  RankItem(RankItem&& from) noexcept
    : RankItem() {
    *this = ::std::move(from);
  }

  inline RankItem& operator=(const RankItem& from) {
    CopyFrom(from);
    return *this;
  }
  inline RankItem& operator=(RankItem&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RankItem& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RankItem* internal_default_instance() {
    return reinterpret_cast<const RankItem*>(
               &_RankItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(RankItem& a, RankItem& b) {
    a.Swap(&b);
  }
  inline void Swap(RankItem* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RankItem* New() const final {
    return CreateMaybeMessage<RankItem>(nullptr);
  }

  RankItem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RankItem>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RankItem& from);
  void MergeFrom(const RankItem& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RankItem* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "RankBoardProto.RankItem";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_RankBoard_2eproto);
    return ::descriptor_table_RankBoard_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUidFieldNumber = 1,
    kGoldFieldNumber = 2,
    kLevelFieldNumber = 3,
    kStarNumFieldNumber = 4,
    kDanGradeFieldNumber = 5,
  };
  // sint64 uid = 1;
  void clear_uid();
  ::PROTOBUF_NAMESPACE_ID::int64 uid() const;
  void set_uid(::PROTOBUF_NAMESPACE_ID::int64 value);

  // sint64 gold = 2;
  void clear_gold();
  ::PROTOBUF_NAMESPACE_ID::int64 gold() const;
  void set_gold(::PROTOBUF_NAMESPACE_ID::int64 value);

  // sint64 level = 3;
  void clear_level();
  ::PROTOBUF_NAMESPACE_ID::int64 level() const;
  void set_level(::PROTOBUF_NAMESPACE_ID::int64 value);

  // sint32 starNum = 4;
  void clear_starnum();
  ::PROTOBUF_NAMESPACE_ID::int32 starnum() const;
  void set_starnum(::PROTOBUF_NAMESPACE_ID::int32 value);

  // sint32 danGrade = 5;
  void clear_dangrade();
  ::PROTOBUF_NAMESPACE_ID::int32 dangrade() const;
  void set_dangrade(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:RankBoardProto.RankItem)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int64 uid_;
  ::PROTOBUF_NAMESPACE_ID::int64 gold_;
  ::PROTOBUF_NAMESPACE_ID::int64 level_;
  ::PROTOBUF_NAMESPACE_ID::int32 starnum_;
  ::PROTOBUF_NAMESPACE_ID::int32 dangrade_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_RankBoard_2eproto;
};
// -------------------------------------------------------------------

class QueryRankInfoResp :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:RankBoardProto.QueryRankInfoResp) */ {
 public:
  QueryRankInfoResp();
  virtual ~QueryRankInfoResp();

  QueryRankInfoResp(const QueryRankInfoResp& from);
  QueryRankInfoResp(QueryRankInfoResp&& from) noexcept
    : QueryRankInfoResp() {
    *this = ::std::move(from);
  }

  inline QueryRankInfoResp& operator=(const QueryRankInfoResp& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryRankInfoResp& operator=(QueryRankInfoResp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const QueryRankInfoResp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const QueryRankInfoResp* internal_default_instance() {
    return reinterpret_cast<const QueryRankInfoResp*>(
               &_QueryRankInfoResp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(QueryRankInfoResp& a, QueryRankInfoResp& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryRankInfoResp* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline QueryRankInfoResp* New() const final {
    return CreateMaybeMessage<QueryRankInfoResp>(nullptr);
  }

  QueryRankInfoResp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<QueryRankInfoResp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const QueryRankInfoResp& from);
  void MergeFrom(const QueryRankInfoResp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryRankInfoResp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "RankBoardProto.QueryRankInfoResp";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_RankBoard_2eproto);
    return ::descriptor_table_RankBoard_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kListFieldNumber = 4,
    kResultCodeFieldNumber = 1,
    kRankingTypeFieldNumber = 2,
    kSeasonTypeFieldNumber = 3,
  };
  // repeated .RankBoardProto.RankItem list = 4;
  int list_size() const;
  void clear_list();
  ::RankBoardProto::RankItem* mutable_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::RankBoardProto::RankItem >*
      mutable_list();
  const ::RankBoardProto::RankItem& list(int index) const;
  ::RankBoardProto::RankItem* add_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::RankBoardProto::RankItem >&
      list() const;

  // sint32 resultCode = 1;
  void clear_resultcode();
  ::PROTOBUF_NAMESPACE_ID::int32 resultcode() const;
  void set_resultcode(::PROTOBUF_NAMESPACE_ID::int32 value);

  // sint32 rankingType = 2;
  void clear_rankingtype();
  ::PROTOBUF_NAMESPACE_ID::int32 rankingtype() const;
  void set_rankingtype(::PROTOBUF_NAMESPACE_ID::int32 value);

  // .RankBoardProto.E_RANK_SEASON_TYPE seasonType = 3;
  void clear_seasontype();
  ::RankBoardProto::E_RANK_SEASON_TYPE seasontype() const;
  void set_seasontype(::RankBoardProto::E_RANK_SEASON_TYPE value);

  // @@protoc_insertion_point(class_scope:RankBoardProto.QueryRankInfoResp)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::RankBoardProto::RankItem > list_;
  ::PROTOBUF_NAMESPACE_ID::int32 resultcode_;
  ::PROTOBUF_NAMESPACE_ID::int32 rankingtype_;
  int seasontype_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_RankBoard_2eproto;
};
// -------------------------------------------------------------------

class FriendAIRankItem :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:RankBoardProto.FriendAIRankItem) */ {
 public:
  FriendAIRankItem();
  virtual ~FriendAIRankItem();

  FriendAIRankItem(const FriendAIRankItem& from);
  FriendAIRankItem(FriendAIRankItem&& from) noexcept
    : FriendAIRankItem() {
    *this = ::std::move(from);
  }

  inline FriendAIRankItem& operator=(const FriendAIRankItem& from) {
    CopyFrom(from);
    return *this;
  }
  inline FriendAIRankItem& operator=(FriendAIRankItem&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FriendAIRankItem& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FriendAIRankItem* internal_default_instance() {
    return reinterpret_cast<const FriendAIRankItem*>(
               &_FriendAIRankItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(FriendAIRankItem& a, FriendAIRankItem& b) {
    a.Swap(&b);
  }
  inline void Swap(FriendAIRankItem* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FriendAIRankItem* New() const final {
    return CreateMaybeMessage<FriendAIRankItem>(nullptr);
  }

  FriendAIRankItem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FriendAIRankItem>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FriendAIRankItem& from);
  void MergeFrom(const FriendAIRankItem& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FriendAIRankItem* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "RankBoardProto.FriendAIRankItem";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_RankBoard_2eproto);
    return ::descriptor_table_RankBoard_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUidFieldNumber = 1,
    kGoldFieldNumber = 2,
    kLevelFieldNumber = 3,
    kStarNumFieldNumber = 4,
  };
  // sint64 uid = 1;
  void clear_uid();
  ::PROTOBUF_NAMESPACE_ID::int64 uid() const;
  void set_uid(::PROTOBUF_NAMESPACE_ID::int64 value);

  // sint64 gold = 2;
  void clear_gold();
  ::PROTOBUF_NAMESPACE_ID::int64 gold() const;
  void set_gold(::PROTOBUF_NAMESPACE_ID::int64 value);

  // sint32 level = 3;
  void clear_level();
  ::PROTOBUF_NAMESPACE_ID::int32 level() const;
  void set_level(::PROTOBUF_NAMESPACE_ID::int32 value);

  // sint32 starNum = 4;
  void clear_starnum();
  ::PROTOBUF_NAMESPACE_ID::int32 starnum() const;
  void set_starnum(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:RankBoardProto.FriendAIRankItem)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int64 uid_;
  ::PROTOBUF_NAMESPACE_ID::int64 gold_;
  ::PROTOBUF_NAMESPACE_ID::int32 level_;
  ::PROTOBUF_NAMESPACE_ID::int32 starnum_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_RankBoard_2eproto;
};
// -------------------------------------------------------------------

class QueryFriendAIRankInfoResp :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:RankBoardProto.QueryFriendAIRankInfoResp) */ {
 public:
  QueryFriendAIRankInfoResp();
  virtual ~QueryFriendAIRankInfoResp();

  QueryFriendAIRankInfoResp(const QueryFriendAIRankInfoResp& from);
  QueryFriendAIRankInfoResp(QueryFriendAIRankInfoResp&& from) noexcept
    : QueryFriendAIRankInfoResp() {
    *this = ::std::move(from);
  }

  inline QueryFriendAIRankInfoResp& operator=(const QueryFriendAIRankInfoResp& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryFriendAIRankInfoResp& operator=(QueryFriendAIRankInfoResp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const QueryFriendAIRankInfoResp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const QueryFriendAIRankInfoResp* internal_default_instance() {
    return reinterpret_cast<const QueryFriendAIRankInfoResp*>(
               &_QueryFriendAIRankInfoResp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(QueryFriendAIRankInfoResp& a, QueryFriendAIRankInfoResp& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryFriendAIRankInfoResp* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline QueryFriendAIRankInfoResp* New() const final {
    return CreateMaybeMessage<QueryFriendAIRankInfoResp>(nullptr);
  }

  QueryFriendAIRankInfoResp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<QueryFriendAIRankInfoResp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const QueryFriendAIRankInfoResp& from);
  void MergeFrom(const QueryFriendAIRankInfoResp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryFriendAIRankInfoResp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "RankBoardProto.QueryFriendAIRankInfoResp";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_RankBoard_2eproto);
    return ::descriptor_table_RankBoard_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kListFieldNumber = 2,
    kResultCodeFieldNumber = 1,
  };
  // repeated .RankBoardProto.FriendAIRankItem list = 2;
  int list_size() const;
  void clear_list();
  ::RankBoardProto::FriendAIRankItem* mutable_list(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::RankBoardProto::FriendAIRankItem >*
      mutable_list();
  const ::RankBoardProto::FriendAIRankItem& list(int index) const;
  ::RankBoardProto::FriendAIRankItem* add_list();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::RankBoardProto::FriendAIRankItem >&
      list() const;

  // sint32 resultCode = 1;
  void clear_resultcode();
  ::PROTOBUF_NAMESPACE_ID::int32 resultcode() const;
  void set_resultcode(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:RankBoardProto.QueryFriendAIRankInfoResp)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::RankBoardProto::FriendAIRankItem > list_;
  ::PROTOBUF_NAMESPACE_ID::int32 resultcode_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_RankBoard_2eproto;
};
// -------------------------------------------------------------------

class QueryAIBaseInfoResp :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:RankBoardProto.QueryAIBaseInfoResp) */ {
 public:
  QueryAIBaseInfoResp();
  virtual ~QueryAIBaseInfoResp();

  QueryAIBaseInfoResp(const QueryAIBaseInfoResp& from);
  QueryAIBaseInfoResp(QueryAIBaseInfoResp&& from) noexcept
    : QueryAIBaseInfoResp() {
    *this = ::std::move(from);
  }

  inline QueryAIBaseInfoResp& operator=(const QueryAIBaseInfoResp& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryAIBaseInfoResp& operator=(QueryAIBaseInfoResp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const QueryAIBaseInfoResp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const QueryAIBaseInfoResp* internal_default_instance() {
    return reinterpret_cast<const QueryAIBaseInfoResp*>(
               &_QueryAIBaseInfoResp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(QueryAIBaseInfoResp& a, QueryAIBaseInfoResp& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryAIBaseInfoResp* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline QueryAIBaseInfoResp* New() const final {
    return CreateMaybeMessage<QueryAIBaseInfoResp>(nullptr);
  }

  QueryAIBaseInfoResp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<QueryAIBaseInfoResp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const QueryAIBaseInfoResp& from);
  void MergeFrom(const QueryAIBaseInfoResp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryAIBaseInfoResp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "RankBoardProto.QueryAIBaseInfoResp";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_RankBoard_2eproto);
    return ::descriptor_table_RankBoard_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUidFieldNumber = 1,
    kHdcountFieldNumber = 2,
    kGoldFieldNumber = 3,
    kAigoldFieldNumber = 4,
    kUserwincountFieldNumber = 5,
    kUsercountFieldNumber = 6,
  };
  // sint64 uid = 1;
  void clear_uid();
  ::PROTOBUF_NAMESPACE_ID::int64 uid() const;
  void set_uid(::PROTOBUF_NAMESPACE_ID::int64 value);

  // sint32 hdcount = 2;
  void clear_hdcount();
  ::PROTOBUF_NAMESPACE_ID::int32 hdcount() const;
  void set_hdcount(::PROTOBUF_NAMESPACE_ID::int32 value);

  // sint32 gold = 3;
  void clear_gold();
  ::PROTOBUF_NAMESPACE_ID::int32 gold() const;
  void set_gold(::PROTOBUF_NAMESPACE_ID::int32 value);

  // sint32 aigold = 4;
  void clear_aigold();
  ::PROTOBUF_NAMESPACE_ID::int32 aigold() const;
  void set_aigold(::PROTOBUF_NAMESPACE_ID::int32 value);

  // sint32 userwincount = 5;
  void clear_userwincount();
  ::PROTOBUF_NAMESPACE_ID::int32 userwincount() const;
  void set_userwincount(::PROTOBUF_NAMESPACE_ID::int32 value);

  // sint32 usercount = 6;
  void clear_usercount();
  ::PROTOBUF_NAMESPACE_ID::int32 usercount() const;
  void set_usercount(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:RankBoardProto.QueryAIBaseInfoResp)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int64 uid_;
  ::PROTOBUF_NAMESPACE_ID::int32 hdcount_;
  ::PROTOBUF_NAMESPACE_ID::int32 gold_;
  ::PROTOBUF_NAMESPACE_ID::int32 aigold_;
  ::PROTOBUF_NAMESPACE_ID::int32 userwincount_;
  ::PROTOBUF_NAMESPACE_ID::int32 usercount_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_RankBoard_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// QueryRankInfoReq

// sint32 type = 1;
inline void QueryRankInfoReq::clear_type() {
  type_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 QueryRankInfoReq::type() const {
  // @@protoc_insertion_point(field_get:RankBoardProto.QueryRankInfoReq.type)
  return type_;
}
inline void QueryRankInfoReq::set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:RankBoardProto.QueryRankInfoReq.type)
}

// sint32 areaId = 2;
inline void QueryRankInfoReq::clear_areaid() {
  areaid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 QueryRankInfoReq::areaid() const {
  // @@protoc_insertion_point(field_get:RankBoardProto.QueryRankInfoReq.areaId)
  return areaid_;
}
inline void QueryRankInfoReq::set_areaid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  areaid_ = value;
  // @@protoc_insertion_point(field_set:RankBoardProto.QueryRankInfoReq.areaId)
}

// .RankBoardProto.E_RANK_SEASON_TYPE seasonType = 3;
inline void QueryRankInfoReq::clear_seasontype() {
  seasontype_ = 0;
}
inline ::RankBoardProto::E_RANK_SEASON_TYPE QueryRankInfoReq::seasontype() const {
  // @@protoc_insertion_point(field_get:RankBoardProto.QueryRankInfoReq.seasonType)
  return static_cast< ::RankBoardProto::E_RANK_SEASON_TYPE >(seasontype_);
}
inline void QueryRankInfoReq::set_seasontype(::RankBoardProto::E_RANK_SEASON_TYPE value) {
  
  seasontype_ = value;
  // @@protoc_insertion_point(field_set:RankBoardProto.QueryRankInfoReq.seasonType)
}

// -------------------------------------------------------------------

// RankItem

// sint64 uid = 1;
inline void RankItem::clear_uid() {
  uid_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RankItem::uid() const {
  // @@protoc_insertion_point(field_get:RankBoardProto.RankItem.uid)
  return uid_;
}
inline void RankItem::set_uid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  uid_ = value;
  // @@protoc_insertion_point(field_set:RankBoardProto.RankItem.uid)
}

// sint64 gold = 2;
inline void RankItem::clear_gold() {
  gold_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RankItem::gold() const {
  // @@protoc_insertion_point(field_get:RankBoardProto.RankItem.gold)
  return gold_;
}
inline void RankItem::set_gold(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  gold_ = value;
  // @@protoc_insertion_point(field_set:RankBoardProto.RankItem.gold)
}

// sint64 level = 3;
inline void RankItem::clear_level() {
  level_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RankItem::level() const {
  // @@protoc_insertion_point(field_get:RankBoardProto.RankItem.level)
  return level_;
}
inline void RankItem::set_level(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  level_ = value;
  // @@protoc_insertion_point(field_set:RankBoardProto.RankItem.level)
}

// sint32 starNum = 4;
inline void RankItem::clear_starnum() {
  starnum_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RankItem::starnum() const {
  // @@protoc_insertion_point(field_get:RankBoardProto.RankItem.starNum)
  return starnum_;
}
inline void RankItem::set_starnum(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  starnum_ = value;
  // @@protoc_insertion_point(field_set:RankBoardProto.RankItem.starNum)
}

// sint32 danGrade = 5;
inline void RankItem::clear_dangrade() {
  dangrade_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RankItem::dangrade() const {
  // @@protoc_insertion_point(field_get:RankBoardProto.RankItem.danGrade)
  return dangrade_;
}
inline void RankItem::set_dangrade(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  dangrade_ = value;
  // @@protoc_insertion_point(field_set:RankBoardProto.RankItem.danGrade)
}

// -------------------------------------------------------------------

// QueryRankInfoResp

// sint32 resultCode = 1;
inline void QueryRankInfoResp::clear_resultcode() {
  resultcode_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 QueryRankInfoResp::resultcode() const {
  // @@protoc_insertion_point(field_get:RankBoardProto.QueryRankInfoResp.resultCode)
  return resultcode_;
}
inline void QueryRankInfoResp::set_resultcode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  resultcode_ = value;
  // @@protoc_insertion_point(field_set:RankBoardProto.QueryRankInfoResp.resultCode)
}

// sint32 rankingType = 2;
inline void QueryRankInfoResp::clear_rankingtype() {
  rankingtype_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 QueryRankInfoResp::rankingtype() const {
  // @@protoc_insertion_point(field_get:RankBoardProto.QueryRankInfoResp.rankingType)
  return rankingtype_;
}
inline void QueryRankInfoResp::set_rankingtype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  rankingtype_ = value;
  // @@protoc_insertion_point(field_set:RankBoardProto.QueryRankInfoResp.rankingType)
}

// .RankBoardProto.E_RANK_SEASON_TYPE seasonType = 3;
inline void QueryRankInfoResp::clear_seasontype() {
  seasontype_ = 0;
}
inline ::RankBoardProto::E_RANK_SEASON_TYPE QueryRankInfoResp::seasontype() const {
  // @@protoc_insertion_point(field_get:RankBoardProto.QueryRankInfoResp.seasonType)
  return static_cast< ::RankBoardProto::E_RANK_SEASON_TYPE >(seasontype_);
}
inline void QueryRankInfoResp::set_seasontype(::RankBoardProto::E_RANK_SEASON_TYPE value) {
  
  seasontype_ = value;
  // @@protoc_insertion_point(field_set:RankBoardProto.QueryRankInfoResp.seasonType)
}

// repeated .RankBoardProto.RankItem list = 4;
inline int QueryRankInfoResp::list_size() const {
  return list_.size();
}
inline void QueryRankInfoResp::clear_list() {
  list_.Clear();
}
inline ::RankBoardProto::RankItem* QueryRankInfoResp::mutable_list(int index) {
  // @@protoc_insertion_point(field_mutable:RankBoardProto.QueryRankInfoResp.list)
  return list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::RankBoardProto::RankItem >*
QueryRankInfoResp::mutable_list() {
  // @@protoc_insertion_point(field_mutable_list:RankBoardProto.QueryRankInfoResp.list)
  return &list_;
}
inline const ::RankBoardProto::RankItem& QueryRankInfoResp::list(int index) const {
  // @@protoc_insertion_point(field_get:RankBoardProto.QueryRankInfoResp.list)
  return list_.Get(index);
}
inline ::RankBoardProto::RankItem* QueryRankInfoResp::add_list() {
  // @@protoc_insertion_point(field_add:RankBoardProto.QueryRankInfoResp.list)
  return list_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::RankBoardProto::RankItem >&
QueryRankInfoResp::list() const {
  // @@protoc_insertion_point(field_list:RankBoardProto.QueryRankInfoResp.list)
  return list_;
}

// -------------------------------------------------------------------

// FriendAIRankItem

// sint64 uid = 1;
inline void FriendAIRankItem::clear_uid() {
  uid_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FriendAIRankItem::uid() const {
  // @@protoc_insertion_point(field_get:RankBoardProto.FriendAIRankItem.uid)
  return uid_;
}
inline void FriendAIRankItem::set_uid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  uid_ = value;
  // @@protoc_insertion_point(field_set:RankBoardProto.FriendAIRankItem.uid)
}

// sint64 gold = 2;
inline void FriendAIRankItem::clear_gold() {
  gold_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 FriendAIRankItem::gold() const {
  // @@protoc_insertion_point(field_get:RankBoardProto.FriendAIRankItem.gold)
  return gold_;
}
inline void FriendAIRankItem::set_gold(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  gold_ = value;
  // @@protoc_insertion_point(field_set:RankBoardProto.FriendAIRankItem.gold)
}

// sint32 level = 3;
inline void FriendAIRankItem::clear_level() {
  level_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FriendAIRankItem::level() const {
  // @@protoc_insertion_point(field_get:RankBoardProto.FriendAIRankItem.level)
  return level_;
}
inline void FriendAIRankItem::set_level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  level_ = value;
  // @@protoc_insertion_point(field_set:RankBoardProto.FriendAIRankItem.level)
}

// sint32 starNum = 4;
inline void FriendAIRankItem::clear_starnum() {
  starnum_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 FriendAIRankItem::starnum() const {
  // @@protoc_insertion_point(field_get:RankBoardProto.FriendAIRankItem.starNum)
  return starnum_;
}
inline void FriendAIRankItem::set_starnum(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  starnum_ = value;
  // @@protoc_insertion_point(field_set:RankBoardProto.FriendAIRankItem.starNum)
}

// -------------------------------------------------------------------

// QueryFriendAIRankInfoResp

// sint32 resultCode = 1;
inline void QueryFriendAIRankInfoResp::clear_resultcode() {
  resultcode_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 QueryFriendAIRankInfoResp::resultcode() const {
  // @@protoc_insertion_point(field_get:RankBoardProto.QueryFriendAIRankInfoResp.resultCode)
  return resultcode_;
}
inline void QueryFriendAIRankInfoResp::set_resultcode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  resultcode_ = value;
  // @@protoc_insertion_point(field_set:RankBoardProto.QueryFriendAIRankInfoResp.resultCode)
}

// repeated .RankBoardProto.FriendAIRankItem list = 2;
inline int QueryFriendAIRankInfoResp::list_size() const {
  return list_.size();
}
inline void QueryFriendAIRankInfoResp::clear_list() {
  list_.Clear();
}
inline ::RankBoardProto::FriendAIRankItem* QueryFriendAIRankInfoResp::mutable_list(int index) {
  // @@protoc_insertion_point(field_mutable:RankBoardProto.QueryFriendAIRankInfoResp.list)
  return list_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::RankBoardProto::FriendAIRankItem >*
QueryFriendAIRankInfoResp::mutable_list() {
  // @@protoc_insertion_point(field_mutable_list:RankBoardProto.QueryFriendAIRankInfoResp.list)
  return &list_;
}
inline const ::RankBoardProto::FriendAIRankItem& QueryFriendAIRankInfoResp::list(int index) const {
  // @@protoc_insertion_point(field_get:RankBoardProto.QueryFriendAIRankInfoResp.list)
  return list_.Get(index);
}
inline ::RankBoardProto::FriendAIRankItem* QueryFriendAIRankInfoResp::add_list() {
  // @@protoc_insertion_point(field_add:RankBoardProto.QueryFriendAIRankInfoResp.list)
  return list_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::RankBoardProto::FriendAIRankItem >&
QueryFriendAIRankInfoResp::list() const {
  // @@protoc_insertion_point(field_list:RankBoardProto.QueryFriendAIRankInfoResp.list)
  return list_;
}

// -------------------------------------------------------------------

// QueryAIBaseInfoResp

// sint64 uid = 1;
inline void QueryAIBaseInfoResp::clear_uid() {
  uid_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 QueryAIBaseInfoResp::uid() const {
  // @@protoc_insertion_point(field_get:RankBoardProto.QueryAIBaseInfoResp.uid)
  return uid_;
}
inline void QueryAIBaseInfoResp::set_uid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  uid_ = value;
  // @@protoc_insertion_point(field_set:RankBoardProto.QueryAIBaseInfoResp.uid)
}

// sint32 hdcount = 2;
inline void QueryAIBaseInfoResp::clear_hdcount() {
  hdcount_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 QueryAIBaseInfoResp::hdcount() const {
  // @@protoc_insertion_point(field_get:RankBoardProto.QueryAIBaseInfoResp.hdcount)
  return hdcount_;
}
inline void QueryAIBaseInfoResp::set_hdcount(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  hdcount_ = value;
  // @@protoc_insertion_point(field_set:RankBoardProto.QueryAIBaseInfoResp.hdcount)
}

// sint32 gold = 3;
inline void QueryAIBaseInfoResp::clear_gold() {
  gold_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 QueryAIBaseInfoResp::gold() const {
  // @@protoc_insertion_point(field_get:RankBoardProto.QueryAIBaseInfoResp.gold)
  return gold_;
}
inline void QueryAIBaseInfoResp::set_gold(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  gold_ = value;
  // @@protoc_insertion_point(field_set:RankBoardProto.QueryAIBaseInfoResp.gold)
}

// sint32 aigold = 4;
inline void QueryAIBaseInfoResp::clear_aigold() {
  aigold_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 QueryAIBaseInfoResp::aigold() const {
  // @@protoc_insertion_point(field_get:RankBoardProto.QueryAIBaseInfoResp.aigold)
  return aigold_;
}
inline void QueryAIBaseInfoResp::set_aigold(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  aigold_ = value;
  // @@protoc_insertion_point(field_set:RankBoardProto.QueryAIBaseInfoResp.aigold)
}

// sint32 userwincount = 5;
inline void QueryAIBaseInfoResp::clear_userwincount() {
  userwincount_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 QueryAIBaseInfoResp::userwincount() const {
  // @@protoc_insertion_point(field_get:RankBoardProto.QueryAIBaseInfoResp.userwincount)
  return userwincount_;
}
inline void QueryAIBaseInfoResp::set_userwincount(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  userwincount_ = value;
  // @@protoc_insertion_point(field_set:RankBoardProto.QueryAIBaseInfoResp.userwincount)
}

// sint32 usercount = 6;
inline void QueryAIBaseInfoResp::clear_usercount() {
  usercount_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 QueryAIBaseInfoResp::usercount() const {
  // @@protoc_insertion_point(field_get:RankBoardProto.QueryAIBaseInfoResp.usercount)
  return usercount_;
}
inline void QueryAIBaseInfoResp::set_usercount(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  usercount_ = value;
  // @@protoc_insertion_point(field_set:RankBoardProto.QueryAIBaseInfoResp.usercount)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace RankBoardProto

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::RankBoardProto::E_RANK_SEASON_TYPE> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::RankBoardProto::E_RANK_SEASON_TYPE>() {
  return ::RankBoardProto::E_RANK_SEASON_TYPE_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_RankBoard_2eproto
