// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: XGameHttp.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_XGameHttp_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_XGameHttp_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_XGameHttp_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_XGameHttp_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_XGameHttp_2eproto;
namespace XGameHttp {
class THttpPackage;
class THttpPackageDefaultTypeInternal;
extern THttpPackageDefaultTypeInternal _THttpPackage_default_instance_;
class TUid;
class TUidDefaultTypeInternal;
extern TUidDefaultTypeInternal _TUid_default_instance_;
}  // namespace XGameHttp
PROTOBUF_NAMESPACE_OPEN
template<> ::XGameHttp::THttpPackage* Arena::CreateMaybeMessage<::XGameHttp::THttpPackage>(Arena*);
template<> ::XGameHttp::TUid* Arena::CreateMaybeMessage<::XGameHttp::TUid>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace XGameHttp {

// ===================================================================

class TUid :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:XGameHttp.TUid) */ {
 public:
  TUid();
  virtual ~TUid();

  TUid(const TUid& from);
  TUid(TUid&& from) noexcept
    : TUid() {
    *this = ::std::move(from);
  }

  inline TUid& operator=(const TUid& from) {
    CopyFrom(from);
    return *this;
  }
  inline TUid& operator=(TUid&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TUid& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TUid* internal_default_instance() {
    return reinterpret_cast<const TUid*>(
               &_TUid_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(TUid& a, TUid& b) {
    a.Swap(&b);
  }
  inline void Swap(TUid* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TUid* New() const final {
    return CreateMaybeMessage<TUid>(nullptr);
  }

  TUid* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TUid>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TUid& from);
  void MergeFrom(const TUid& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TUid* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "XGameHttp.TUid";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_XGameHttp_2eproto);
    return ::descriptor_table_XGameHttp_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSTokenFieldNumber = 2,
    kLUidFieldNumber = 1,
  };
  // string sToken = 2;
  void clear_stoken();
  const std::string& stoken() const;
  void set_stoken(const std::string& value);
  void set_stoken(std::string&& value);
  void set_stoken(const char* value);
  void set_stoken(const char* value, size_t size);
  std::string* mutable_stoken();
  std::string* release_stoken();
  void set_allocated_stoken(std::string* stoken);

  // sint64 lUid = 1;
  void clear_luid();
  ::PROTOBUF_NAMESPACE_ID::int64 luid() const;
  void set_luid(::PROTOBUF_NAMESPACE_ID::int64 value);

  // @@protoc_insertion_point(class_scope:XGameHttp.TUid)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr stoken_;
  ::PROTOBUF_NAMESPACE_ID::int64 luid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_XGameHttp_2eproto;
};
// -------------------------------------------------------------------

class THttpPackage :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:XGameHttp.THttpPackage) */ {
 public:
  THttpPackage();
  virtual ~THttpPackage();

  THttpPackage(const THttpPackage& from);
  THttpPackage(THttpPackage&& from) noexcept
    : THttpPackage() {
    *this = ::std::move(from);
  }

  inline THttpPackage& operator=(const THttpPackage& from) {
    CopyFrom(from);
    return *this;
  }
  inline THttpPackage& operator=(THttpPackage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const THttpPackage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const THttpPackage* internal_default_instance() {
    return reinterpret_cast<const THttpPackage*>(
               &_THttpPackage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(THttpPackage& a, THttpPackage& b) {
    a.Swap(&b);
  }
  inline void Swap(THttpPackage* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline THttpPackage* New() const final {
    return CreateMaybeMessage<THttpPackage>(nullptr);
  }

  THttpPackage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<THttpPackage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const THttpPackage& from);
  void MergeFrom(const THttpPackage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(THttpPackage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "XGameHttp.THttpPackage";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_XGameHttp_2eproto);
    return ::descriptor_table_XGameHttp_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVecDataFieldNumber = 5,
    kStUidFieldNumber = 3,
    kIVerFieldNumber = 1,
    kISeqFieldNumber = 2,
    kNMsgIDFieldNumber = 4,
  };
  // bytes vecData = 5;
  void clear_vecdata();
  const std::string& vecdata() const;
  void set_vecdata(const std::string& value);
  void set_vecdata(std::string&& value);
  void set_vecdata(const char* value);
  void set_vecdata(const void* value, size_t size);
  std::string* mutable_vecdata();
  std::string* release_vecdata();
  void set_allocated_vecdata(std::string* vecdata);

  // .XGameHttp.TUid stUid = 3;
  bool has_stuid() const;
  void clear_stuid();
  const ::XGameHttp::TUid& stuid() const;
  ::XGameHttp::TUid* release_stuid();
  ::XGameHttp::TUid* mutable_stuid();
  void set_allocated_stuid(::XGameHttp::TUid* stuid);

  // sint32 iVer = 1;
  void clear_iver();
  ::PROTOBUF_NAMESPACE_ID::int32 iver() const;
  void set_iver(::PROTOBUF_NAMESPACE_ID::int32 value);

  // sint32 iSeq = 2;
  void clear_iseq();
  ::PROTOBUF_NAMESPACE_ID::int32 iseq() const;
  void set_iseq(::PROTOBUF_NAMESPACE_ID::int32 value);

  // sint32 nMsgID = 4;
  void clear_nmsgid();
  ::PROTOBUF_NAMESPACE_ID::int32 nmsgid() const;
  void set_nmsgid(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:XGameHttp.THttpPackage)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr vecdata_;
  ::XGameHttp::TUid* stuid_;
  ::PROTOBUF_NAMESPACE_ID::int32 iver_;
  ::PROTOBUF_NAMESPACE_ID::int32 iseq_;
  ::PROTOBUF_NAMESPACE_ID::int32 nmsgid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_XGameHttp_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TUid

// sint64 lUid = 1;
inline void TUid::clear_luid() {
  luid_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 TUid::luid() const {
  // @@protoc_insertion_point(field_get:XGameHttp.TUid.lUid)
  return luid_;
}
inline void TUid::set_luid(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  luid_ = value;
  // @@protoc_insertion_point(field_set:XGameHttp.TUid.lUid)
}

// string sToken = 2;
inline void TUid::clear_stoken() {
  stoken_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& TUid::stoken() const {
  // @@protoc_insertion_point(field_get:XGameHttp.TUid.sToken)
  return stoken_.GetNoArena();
}
inline void TUid::set_stoken(const std::string& value) {
  
  stoken_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:XGameHttp.TUid.sToken)
}
inline void TUid::set_stoken(std::string&& value) {
  
  stoken_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:XGameHttp.TUid.sToken)
}
inline void TUid::set_stoken(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  stoken_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:XGameHttp.TUid.sToken)
}
inline void TUid::set_stoken(const char* value, size_t size) {
  
  stoken_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:XGameHttp.TUid.sToken)
}
inline std::string* TUid::mutable_stoken() {
  
  // @@protoc_insertion_point(field_mutable:XGameHttp.TUid.sToken)
  return stoken_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TUid::release_stoken() {
  // @@protoc_insertion_point(field_release:XGameHttp.TUid.sToken)
  
  return stoken_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TUid::set_allocated_stoken(std::string* stoken) {
  if (stoken != nullptr) {
    
  } else {
    
  }
  stoken_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), stoken);
  // @@protoc_insertion_point(field_set_allocated:XGameHttp.TUid.sToken)
}

// -------------------------------------------------------------------

// THttpPackage

// sint32 iVer = 1;
inline void THttpPackage::clear_iver() {
  iver_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 THttpPackage::iver() const {
  // @@protoc_insertion_point(field_get:XGameHttp.THttpPackage.iVer)
  return iver_;
}
inline void THttpPackage::set_iver(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  iver_ = value;
  // @@protoc_insertion_point(field_set:XGameHttp.THttpPackage.iVer)
}

// sint32 iSeq = 2;
inline void THttpPackage::clear_iseq() {
  iseq_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 THttpPackage::iseq() const {
  // @@protoc_insertion_point(field_get:XGameHttp.THttpPackage.iSeq)
  return iseq_;
}
inline void THttpPackage::set_iseq(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  iseq_ = value;
  // @@protoc_insertion_point(field_set:XGameHttp.THttpPackage.iSeq)
}

// .XGameHttp.TUid stUid = 3;
inline bool THttpPackage::has_stuid() const {
  return this != internal_default_instance() && stuid_ != nullptr;
}
inline void THttpPackage::clear_stuid() {
  if (GetArenaNoVirtual() == nullptr && stuid_ != nullptr) {
    delete stuid_;
  }
  stuid_ = nullptr;
}
inline const ::XGameHttp::TUid& THttpPackage::stuid() const {
  const ::XGameHttp::TUid* p = stuid_;
  // @@protoc_insertion_point(field_get:XGameHttp.THttpPackage.stUid)
  return p != nullptr ? *p : *reinterpret_cast<const ::XGameHttp::TUid*>(
      &::XGameHttp::_TUid_default_instance_);
}
inline ::XGameHttp::TUid* THttpPackage::release_stuid() {
  // @@protoc_insertion_point(field_release:XGameHttp.THttpPackage.stUid)
  
  ::XGameHttp::TUid* temp = stuid_;
  stuid_ = nullptr;
  return temp;
}
inline ::XGameHttp::TUid* THttpPackage::mutable_stuid() {
  
  if (stuid_ == nullptr) {
    auto* p = CreateMaybeMessage<::XGameHttp::TUid>(GetArenaNoVirtual());
    stuid_ = p;
  }
  // @@protoc_insertion_point(field_mutable:XGameHttp.THttpPackage.stUid)
  return stuid_;
}
inline void THttpPackage::set_allocated_stuid(::XGameHttp::TUid* stuid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete stuid_;
  }
  if (stuid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      stuid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stuid, submessage_arena);
    }
    
  } else {
    
  }
  stuid_ = stuid;
  // @@protoc_insertion_point(field_set_allocated:XGameHttp.THttpPackage.stUid)
}

// sint32 nMsgID = 4;
inline void THttpPackage::clear_nmsgid() {
  nmsgid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 THttpPackage::nmsgid() const {
  // @@protoc_insertion_point(field_get:XGameHttp.THttpPackage.nMsgID)
  return nmsgid_;
}
inline void THttpPackage::set_nmsgid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  nmsgid_ = value;
  // @@protoc_insertion_point(field_set:XGameHttp.THttpPackage.nMsgID)
}

// bytes vecData = 5;
inline void THttpPackage::clear_vecdata() {
  vecdata_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& THttpPackage::vecdata() const {
  // @@protoc_insertion_point(field_get:XGameHttp.THttpPackage.vecData)
  return vecdata_.GetNoArena();
}
inline void THttpPackage::set_vecdata(const std::string& value) {
  
  vecdata_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:XGameHttp.THttpPackage.vecData)
}
inline void THttpPackage::set_vecdata(std::string&& value) {
  
  vecdata_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:XGameHttp.THttpPackage.vecData)
}
inline void THttpPackage::set_vecdata(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  vecdata_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:XGameHttp.THttpPackage.vecData)
}
inline void THttpPackage::set_vecdata(const void* value, size_t size) {
  
  vecdata_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:XGameHttp.THttpPackage.vecData)
}
inline std::string* THttpPackage::mutable_vecdata() {
  
  // @@protoc_insertion_point(field_mutable:XGameHttp.THttpPackage.vecData)
  return vecdata_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* THttpPackage::release_vecdata() {
  // @@protoc_insertion_point(field_release:XGameHttp.THttpPackage.vecData)
  
  return vecdata_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void THttpPackage::set_allocated_vecdata(std::string* vecdata) {
  if (vecdata != nullptr) {
    
  } else {
    
  }
  vecdata_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), vecdata);
  // @@protoc_insertion_point(field_set_allocated:XGameHttp.THttpPackage.vecData)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace XGameHttp

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_XGameHttp_2eproto
