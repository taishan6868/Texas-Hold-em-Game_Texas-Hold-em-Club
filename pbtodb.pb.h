// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: pbtodb.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_pbtodb_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_pbtodb_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_pbtodb_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_pbtodb_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_pbtodb_2eproto;
namespace pbtodb {
class ActStatistics;
class ActStatisticsDefaultTypeInternal;
extern ActStatisticsDefaultTypeInternal _ActStatistics_default_instance_;
class ActStatisticsCount;
class ActStatisticsCountDefaultTypeInternal;
extern ActStatisticsCountDefaultTypeInternal _ActStatisticsCount_default_instance_;
class ActStatisticsRounds;
class ActStatisticsRoundsDefaultTypeInternal;
extern ActStatisticsRoundsDefaultTypeInternal _ActStatisticsRounds_default_instance_;
class KoActStatistics;
class KoActStatisticsDefaultTypeInternal;
extern KoActStatisticsDefaultTypeInternal _KoActStatistics_default_instance_;
class KoActStatistics_MapMatchIDEntry_DoNotUse;
class KoActStatistics_MapMatchIDEntry_DoNotUseDefaultTypeInternal;
extern KoActStatistics_MapMatchIDEntry_DoNotUseDefaultTypeInternal _KoActStatistics_MapMatchIDEntry_DoNotUse_default_instance_;
}  // namespace pbtodb
PROTOBUF_NAMESPACE_OPEN
template<> ::pbtodb::ActStatistics* Arena::CreateMaybeMessage<::pbtodb::ActStatistics>(Arena*);
template<> ::pbtodb::ActStatisticsCount* Arena::CreateMaybeMessage<::pbtodb::ActStatisticsCount>(Arena*);
template<> ::pbtodb::ActStatisticsRounds* Arena::CreateMaybeMessage<::pbtodb::ActStatisticsRounds>(Arena*);
template<> ::pbtodb::KoActStatistics* Arena::CreateMaybeMessage<::pbtodb::KoActStatistics>(Arena*);
template<> ::pbtodb::KoActStatistics_MapMatchIDEntry_DoNotUse* Arena::CreateMaybeMessage<::pbtodb::KoActStatistics_MapMatchIDEntry_DoNotUse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace pbtodb {

// ===================================================================

class ActStatisticsCount :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pbtodb.ActStatisticsCount) */ {
 public:
  ActStatisticsCount();
  virtual ~ActStatisticsCount();

  ActStatisticsCount(const ActStatisticsCount& from);
  ActStatisticsCount(ActStatisticsCount&& from) noexcept
    : ActStatisticsCount() {
    *this = ::std::move(from);
  }

  inline ActStatisticsCount& operator=(const ActStatisticsCount& from) {
    CopyFrom(from);
    return *this;
  }
  inline ActStatisticsCount& operator=(ActStatisticsCount&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ActStatisticsCount& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ActStatisticsCount* internal_default_instance() {
    return reinterpret_cast<const ActStatisticsCount*>(
               &_ActStatisticsCount_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ActStatisticsCount& a, ActStatisticsCount& b) {
    a.Swap(&b);
  }
  inline void Swap(ActStatisticsCount* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ActStatisticsCount* New() const final {
    return CreateMaybeMessage<ActStatisticsCount>(nullptr);
  }

  ActStatisticsCount* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ActStatisticsCount>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ActStatisticsCount& from);
  void MergeFrom(const ActStatisticsCount& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ActStatisticsCount* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pbtodb.ActStatisticsCount";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pbtodb_2eproto);
    return ::descriptor_table_pbtodb_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFlopCont2BetsFieldNumber = 3,
    kTurnCont2BetsFieldNumber = 4,
    kFlopCont2RaisesFieldNumber = 5,
    kTurnCont2RaisesFieldNumber = 6,
    kShowdownWinsFieldNumber = 7,
    kShowdownsFieldNumber = 8,
    kBetsCountFieldNumber = 9,
    kRaisesCountFieldNumber = 10,
    kCallsCountFieldNumber = 11,
  };
  // uint32 flop_cont2_bets = 3;
  void clear_flop_cont2_bets();
  ::PROTOBUF_NAMESPACE_ID::uint32 flop_cont2_bets() const;
  void set_flop_cont2_bets(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // uint32 turn_cont2_bets = 4;
  void clear_turn_cont2_bets();
  ::PROTOBUF_NAMESPACE_ID::uint32 turn_cont2_bets() const;
  void set_turn_cont2_bets(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // uint32 flop_cont2_raises = 5;
  void clear_flop_cont2_raises();
  ::PROTOBUF_NAMESPACE_ID::uint32 flop_cont2_raises() const;
  void set_flop_cont2_raises(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // uint32 turn_cont2_raises = 6;
  void clear_turn_cont2_raises();
  ::PROTOBUF_NAMESPACE_ID::uint32 turn_cont2_raises() const;
  void set_turn_cont2_raises(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // uint32 showdown_wins = 7;
  void clear_showdown_wins();
  ::PROTOBUF_NAMESPACE_ID::uint32 showdown_wins() const;
  void set_showdown_wins(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // uint32 showdowns = 8;
  void clear_showdowns();
  ::PROTOBUF_NAMESPACE_ID::uint32 showdowns() const;
  void set_showdowns(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // uint32 bets_count = 9;
  void clear_bets_count();
  ::PROTOBUF_NAMESPACE_ID::uint32 bets_count() const;
  void set_bets_count(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // uint32 raises_count = 10;
  void clear_raises_count();
  ::PROTOBUF_NAMESPACE_ID::uint32 raises_count() const;
  void set_raises_count(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // uint32 calls_count = 11;
  void clear_calls_count();
  ::PROTOBUF_NAMESPACE_ID::uint32 calls_count() const;
  void set_calls_count(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:pbtodb.ActStatisticsCount)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 flop_cont2_bets_;
  ::PROTOBUF_NAMESPACE_ID::uint32 turn_cont2_bets_;
  ::PROTOBUF_NAMESPACE_ID::uint32 flop_cont2_raises_;
  ::PROTOBUF_NAMESPACE_ID::uint32 turn_cont2_raises_;
  ::PROTOBUF_NAMESPACE_ID::uint32 showdown_wins_;
  ::PROTOBUF_NAMESPACE_ID::uint32 showdowns_;
  ::PROTOBUF_NAMESPACE_ID::uint32 bets_count_;
  ::PROTOBUF_NAMESPACE_ID::uint32 raises_count_;
  ::PROTOBUF_NAMESPACE_ID::uint32 calls_count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pbtodb_2eproto;
};
// -------------------------------------------------------------------

class ActStatisticsRounds :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pbtodb.ActStatisticsRounds) */ {
 public:
  ActStatisticsRounds();
  virtual ~ActStatisticsRounds();

  ActStatisticsRounds(const ActStatisticsRounds& from);
  ActStatisticsRounds(ActStatisticsRounds&& from) noexcept
    : ActStatisticsRounds() {
    *this = ::std::move(from);
  }

  inline ActStatisticsRounds& operator=(const ActStatisticsRounds& from) {
    CopyFrom(from);
    return *this;
  }
  inline ActStatisticsRounds& operator=(ActStatisticsRounds&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ActStatisticsRounds& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ActStatisticsRounds* internal_default_instance() {
    return reinterpret_cast<const ActStatisticsRounds*>(
               &_ActStatisticsRounds_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ActStatisticsRounds& a, ActStatisticsRounds& b) {
    a.Swap(&b);
  }
  inline void Swap(ActStatisticsRounds* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ActStatisticsRounds* New() const final {
    return CreateMaybeMessage<ActStatisticsRounds>(nullptr);
  }

  ActStatisticsRounds* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ActStatisticsRounds>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ActStatisticsRounds& from);
  void MergeFrom(const ActStatisticsRounds& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ActStatisticsRounds* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pbtodb.ActStatisticsRounds";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pbtodb_2eproto);
    return ::descriptor_table_pbtodb_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTotalRoundsFieldNumber = 1,
    kBetRoundsFieldNumber = 2,
    kFlopRaiseRoundsFieldNumber = 3,
    kFirstRaiseRoundsFieldNumber = 4,
    kPosFirstRaiseRoundsFieldNumber = 5,
    kRaise2RoundsFieldNumber = 6,
    kFlopRaiseAfterBetRoundsFieldNumber = 7,
    kTurnRaiseAfterBetRoundsFieldNumber = 8,
    kFlopRaiseAfterFlodRoundsFieldNumber = 9,
    kTurnRaiseAfterFlodRoundsFieldNumber = 10,
    kJoinFlopRoundsFieldNumber = 11,
    kJoinTurnRoundsFieldNumber = 12,
  };
  // uint32 total_rounds = 1;
  void clear_total_rounds();
  ::PROTOBUF_NAMESPACE_ID::uint32 total_rounds() const;
  void set_total_rounds(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // uint32 bet_rounds = 2;
  void clear_bet_rounds();
  ::PROTOBUF_NAMESPACE_ID::uint32 bet_rounds() const;
  void set_bet_rounds(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // uint32 flop_raise_rounds = 3;
  void clear_flop_raise_rounds();
  ::PROTOBUF_NAMESPACE_ID::uint32 flop_raise_rounds() const;
  void set_flop_raise_rounds(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // uint32 first_raise_rounds = 4;
  void clear_first_raise_rounds();
  ::PROTOBUF_NAMESPACE_ID::uint32 first_raise_rounds() const;
  void set_first_raise_rounds(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // uint32 pos_first_raise_rounds = 5;
  void clear_pos_first_raise_rounds();
  ::PROTOBUF_NAMESPACE_ID::uint32 pos_first_raise_rounds() const;
  void set_pos_first_raise_rounds(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // uint32 raise2_rounds = 6;
  void clear_raise2_rounds();
  ::PROTOBUF_NAMESPACE_ID::uint32 raise2_rounds() const;
  void set_raise2_rounds(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // uint32 flop_raise_after_bet_rounds = 7;
  void clear_flop_raise_after_bet_rounds();
  ::PROTOBUF_NAMESPACE_ID::uint32 flop_raise_after_bet_rounds() const;
  void set_flop_raise_after_bet_rounds(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // uint32 turn_raise_after_bet_rounds = 8;
  void clear_turn_raise_after_bet_rounds();
  ::PROTOBUF_NAMESPACE_ID::uint32 turn_raise_after_bet_rounds() const;
  void set_turn_raise_after_bet_rounds(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // uint32 flop_raise_after_flod_rounds = 9;
  void clear_flop_raise_after_flod_rounds();
  ::PROTOBUF_NAMESPACE_ID::uint32 flop_raise_after_flod_rounds() const;
  void set_flop_raise_after_flod_rounds(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // uint32 turn_raise_after_flod_rounds = 10;
  void clear_turn_raise_after_flod_rounds();
  ::PROTOBUF_NAMESPACE_ID::uint32 turn_raise_after_flod_rounds() const;
  void set_turn_raise_after_flod_rounds(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // uint32 join_flop_rounds = 11;
  void clear_join_flop_rounds();
  ::PROTOBUF_NAMESPACE_ID::uint32 join_flop_rounds() const;
  void set_join_flop_rounds(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // uint32 join_turn_rounds = 12;
  void clear_join_turn_rounds();
  ::PROTOBUF_NAMESPACE_ID::uint32 join_turn_rounds() const;
  void set_join_turn_rounds(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:pbtodb.ActStatisticsRounds)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 total_rounds_;
  ::PROTOBUF_NAMESPACE_ID::uint32 bet_rounds_;
  ::PROTOBUF_NAMESPACE_ID::uint32 flop_raise_rounds_;
  ::PROTOBUF_NAMESPACE_ID::uint32 first_raise_rounds_;
  ::PROTOBUF_NAMESPACE_ID::uint32 pos_first_raise_rounds_;
  ::PROTOBUF_NAMESPACE_ID::uint32 raise2_rounds_;
  ::PROTOBUF_NAMESPACE_ID::uint32 flop_raise_after_bet_rounds_;
  ::PROTOBUF_NAMESPACE_ID::uint32 turn_raise_after_bet_rounds_;
  ::PROTOBUF_NAMESPACE_ID::uint32 flop_raise_after_flod_rounds_;
  ::PROTOBUF_NAMESPACE_ID::uint32 turn_raise_after_flod_rounds_;
  ::PROTOBUF_NAMESPACE_ID::uint32 join_flop_rounds_;
  ::PROTOBUF_NAMESPACE_ID::uint32 join_turn_rounds_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pbtodb_2eproto;
};
// -------------------------------------------------------------------

class ActStatistics :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pbtodb.ActStatistics) */ {
 public:
  ActStatistics();
  virtual ~ActStatistics();

  ActStatistics(const ActStatistics& from);
  ActStatistics(ActStatistics&& from) noexcept
    : ActStatistics() {
    *this = ::std::move(from);
  }

  inline ActStatistics& operator=(const ActStatistics& from) {
    CopyFrom(from);
    return *this;
  }
  inline ActStatistics& operator=(ActStatistics&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ActStatistics& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ActStatistics* internal_default_instance() {
    return reinterpret_cast<const ActStatistics*>(
               &_ActStatistics_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ActStatistics& a, ActStatistics& b) {
    a.Swap(&b);
  }
  inline void Swap(ActStatistics* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ActStatistics* New() const final {
    return CreateMaybeMessage<ActStatistics>(nullptr);
  }

  ActStatistics* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ActStatistics>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ActStatistics& from);
  void MergeFrom(const ActStatistics& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ActStatistics* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pbtodb.ActStatistics";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pbtodb_2eproto);
    return ::descriptor_table_pbtodb_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBlindLevelListFieldNumber = 3,
    kActCountFieldNumber = 1,
    kActRoundsFieldNumber = 2,
  };
  // repeated uint32 blind_level_list = 3;
  int blind_level_list_size() const;
  void clear_blind_level_list();
  ::PROTOBUF_NAMESPACE_ID::uint32 blind_level_list(int index) const;
  void set_blind_level_list(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_blind_level_list(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      blind_level_list() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_blind_level_list();

  // .pbtodb.ActStatisticsCount act_count = 1;
  bool has_act_count() const;
  void clear_act_count();
  const ::pbtodb::ActStatisticsCount& act_count() const;
  ::pbtodb::ActStatisticsCount* release_act_count();
  ::pbtodb::ActStatisticsCount* mutable_act_count();
  void set_allocated_act_count(::pbtodb::ActStatisticsCount* act_count);

  // .pbtodb.ActStatisticsRounds act_rounds = 2;
  bool has_act_rounds() const;
  void clear_act_rounds();
  const ::pbtodb::ActStatisticsRounds& act_rounds() const;
  ::pbtodb::ActStatisticsRounds* release_act_rounds();
  ::pbtodb::ActStatisticsRounds* mutable_act_rounds();
  void set_allocated_act_rounds(::pbtodb::ActStatisticsRounds* act_rounds);

  // @@protoc_insertion_point(class_scope:pbtodb.ActStatistics)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > blind_level_list_;
  mutable std::atomic<int> _blind_level_list_cached_byte_size_;
  ::pbtodb::ActStatisticsCount* act_count_;
  ::pbtodb::ActStatisticsRounds* act_rounds_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pbtodb_2eproto;
};
// -------------------------------------------------------------------

class KoActStatistics_MapMatchIDEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<KoActStatistics_MapMatchIDEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int64,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<KoActStatistics_MapMatchIDEntry_DoNotUse, 
    ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int64,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64,
    0 > SuperType;
  KoActStatistics_MapMatchIDEntry_DoNotUse();
  KoActStatistics_MapMatchIDEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const KoActStatistics_MapMatchIDEntry_DoNotUse& other);
  static const KoActStatistics_MapMatchIDEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const KoActStatistics_MapMatchIDEntry_DoNotUse*>(&_KoActStatistics_MapMatchIDEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(void*) { return true; }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pbtodb_2eproto);
    return ::descriptor_table_pbtodb_2eproto.file_level_metadata[3];
  }

  public:
};

// -------------------------------------------------------------------

class KoActStatistics :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:pbtodb.KoActStatistics) */ {
 public:
  KoActStatistics();
  virtual ~KoActStatistics();

  KoActStatistics(const KoActStatistics& from);
  KoActStatistics(KoActStatistics&& from) noexcept
    : KoActStatistics() {
    *this = ::std::move(from);
  }

  inline KoActStatistics& operator=(const KoActStatistics& from) {
    CopyFrom(from);
    return *this;
  }
  inline KoActStatistics& operator=(KoActStatistics&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const KoActStatistics& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const KoActStatistics* internal_default_instance() {
    return reinterpret_cast<const KoActStatistics*>(
               &_KoActStatistics_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(KoActStatistics& a, KoActStatistics& b) {
    a.Swap(&b);
  }
  inline void Swap(KoActStatistics* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline KoActStatistics* New() const final {
    return CreateMaybeMessage<KoActStatistics>(nullptr);
  }

  KoActStatistics* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<KoActStatistics>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const KoActStatistics& from);
  void MergeFrom(const KoActStatistics& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(KoActStatistics* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "pbtodb.KoActStatistics";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_pbtodb_2eproto);
    return ::descriptor_table_pbtodb_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kMapMatchIDFieldNumber = 1,
  };
  // map<int32, int64> mapMatchID = 1;
  int mapmatchid_size() const;
  void clear_mapmatchid();
  const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int64 >&
      mapmatchid() const;
  ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int64 >*
      mutable_mapmatchid();

  // @@protoc_insertion_point(class_scope:pbtodb.KoActStatistics)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      KoActStatistics_MapMatchIDEntry_DoNotUse,
      ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int64,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT64,
      0 > mapmatchid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_pbtodb_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ActStatisticsCount

// uint32 flop_cont2_bets = 3;
inline void ActStatisticsCount::clear_flop_cont2_bets() {
  flop_cont2_bets_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ActStatisticsCount::flop_cont2_bets() const {
  // @@protoc_insertion_point(field_get:pbtodb.ActStatisticsCount.flop_cont2_bets)
  return flop_cont2_bets_;
}
inline void ActStatisticsCount::set_flop_cont2_bets(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  flop_cont2_bets_ = value;
  // @@protoc_insertion_point(field_set:pbtodb.ActStatisticsCount.flop_cont2_bets)
}

// uint32 turn_cont2_bets = 4;
inline void ActStatisticsCount::clear_turn_cont2_bets() {
  turn_cont2_bets_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ActStatisticsCount::turn_cont2_bets() const {
  // @@protoc_insertion_point(field_get:pbtodb.ActStatisticsCount.turn_cont2_bets)
  return turn_cont2_bets_;
}
inline void ActStatisticsCount::set_turn_cont2_bets(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  turn_cont2_bets_ = value;
  // @@protoc_insertion_point(field_set:pbtodb.ActStatisticsCount.turn_cont2_bets)
}

// uint32 flop_cont2_raises = 5;
inline void ActStatisticsCount::clear_flop_cont2_raises() {
  flop_cont2_raises_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ActStatisticsCount::flop_cont2_raises() const {
  // @@protoc_insertion_point(field_get:pbtodb.ActStatisticsCount.flop_cont2_raises)
  return flop_cont2_raises_;
}
inline void ActStatisticsCount::set_flop_cont2_raises(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  flop_cont2_raises_ = value;
  // @@protoc_insertion_point(field_set:pbtodb.ActStatisticsCount.flop_cont2_raises)
}

// uint32 turn_cont2_raises = 6;
inline void ActStatisticsCount::clear_turn_cont2_raises() {
  turn_cont2_raises_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ActStatisticsCount::turn_cont2_raises() const {
  // @@protoc_insertion_point(field_get:pbtodb.ActStatisticsCount.turn_cont2_raises)
  return turn_cont2_raises_;
}
inline void ActStatisticsCount::set_turn_cont2_raises(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  turn_cont2_raises_ = value;
  // @@protoc_insertion_point(field_set:pbtodb.ActStatisticsCount.turn_cont2_raises)
}

// uint32 showdown_wins = 7;
inline void ActStatisticsCount::clear_showdown_wins() {
  showdown_wins_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ActStatisticsCount::showdown_wins() const {
  // @@protoc_insertion_point(field_get:pbtodb.ActStatisticsCount.showdown_wins)
  return showdown_wins_;
}
inline void ActStatisticsCount::set_showdown_wins(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  showdown_wins_ = value;
  // @@protoc_insertion_point(field_set:pbtodb.ActStatisticsCount.showdown_wins)
}

// uint32 showdowns = 8;
inline void ActStatisticsCount::clear_showdowns() {
  showdowns_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ActStatisticsCount::showdowns() const {
  // @@protoc_insertion_point(field_get:pbtodb.ActStatisticsCount.showdowns)
  return showdowns_;
}
inline void ActStatisticsCount::set_showdowns(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  showdowns_ = value;
  // @@protoc_insertion_point(field_set:pbtodb.ActStatisticsCount.showdowns)
}

// uint32 bets_count = 9;
inline void ActStatisticsCount::clear_bets_count() {
  bets_count_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ActStatisticsCount::bets_count() const {
  // @@protoc_insertion_point(field_get:pbtodb.ActStatisticsCount.bets_count)
  return bets_count_;
}
inline void ActStatisticsCount::set_bets_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  bets_count_ = value;
  // @@protoc_insertion_point(field_set:pbtodb.ActStatisticsCount.bets_count)
}

// uint32 raises_count = 10;
inline void ActStatisticsCount::clear_raises_count() {
  raises_count_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ActStatisticsCount::raises_count() const {
  // @@protoc_insertion_point(field_get:pbtodb.ActStatisticsCount.raises_count)
  return raises_count_;
}
inline void ActStatisticsCount::set_raises_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  raises_count_ = value;
  // @@protoc_insertion_point(field_set:pbtodb.ActStatisticsCount.raises_count)
}

// uint32 calls_count = 11;
inline void ActStatisticsCount::clear_calls_count() {
  calls_count_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ActStatisticsCount::calls_count() const {
  // @@protoc_insertion_point(field_get:pbtodb.ActStatisticsCount.calls_count)
  return calls_count_;
}
inline void ActStatisticsCount::set_calls_count(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  calls_count_ = value;
  // @@protoc_insertion_point(field_set:pbtodb.ActStatisticsCount.calls_count)
}

// -------------------------------------------------------------------

// ActStatisticsRounds

// uint32 total_rounds = 1;
inline void ActStatisticsRounds::clear_total_rounds() {
  total_rounds_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ActStatisticsRounds::total_rounds() const {
  // @@protoc_insertion_point(field_get:pbtodb.ActStatisticsRounds.total_rounds)
  return total_rounds_;
}
inline void ActStatisticsRounds::set_total_rounds(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  total_rounds_ = value;
  // @@protoc_insertion_point(field_set:pbtodb.ActStatisticsRounds.total_rounds)
}

// uint32 bet_rounds = 2;
inline void ActStatisticsRounds::clear_bet_rounds() {
  bet_rounds_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ActStatisticsRounds::bet_rounds() const {
  // @@protoc_insertion_point(field_get:pbtodb.ActStatisticsRounds.bet_rounds)
  return bet_rounds_;
}
inline void ActStatisticsRounds::set_bet_rounds(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  bet_rounds_ = value;
  // @@protoc_insertion_point(field_set:pbtodb.ActStatisticsRounds.bet_rounds)
}

// uint32 flop_raise_rounds = 3;
inline void ActStatisticsRounds::clear_flop_raise_rounds() {
  flop_raise_rounds_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ActStatisticsRounds::flop_raise_rounds() const {
  // @@protoc_insertion_point(field_get:pbtodb.ActStatisticsRounds.flop_raise_rounds)
  return flop_raise_rounds_;
}
inline void ActStatisticsRounds::set_flop_raise_rounds(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  flop_raise_rounds_ = value;
  // @@protoc_insertion_point(field_set:pbtodb.ActStatisticsRounds.flop_raise_rounds)
}

// uint32 first_raise_rounds = 4;
inline void ActStatisticsRounds::clear_first_raise_rounds() {
  first_raise_rounds_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ActStatisticsRounds::first_raise_rounds() const {
  // @@protoc_insertion_point(field_get:pbtodb.ActStatisticsRounds.first_raise_rounds)
  return first_raise_rounds_;
}
inline void ActStatisticsRounds::set_first_raise_rounds(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  first_raise_rounds_ = value;
  // @@protoc_insertion_point(field_set:pbtodb.ActStatisticsRounds.first_raise_rounds)
}

// uint32 pos_first_raise_rounds = 5;
inline void ActStatisticsRounds::clear_pos_first_raise_rounds() {
  pos_first_raise_rounds_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ActStatisticsRounds::pos_first_raise_rounds() const {
  // @@protoc_insertion_point(field_get:pbtodb.ActStatisticsRounds.pos_first_raise_rounds)
  return pos_first_raise_rounds_;
}
inline void ActStatisticsRounds::set_pos_first_raise_rounds(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  pos_first_raise_rounds_ = value;
  // @@protoc_insertion_point(field_set:pbtodb.ActStatisticsRounds.pos_first_raise_rounds)
}

// uint32 raise2_rounds = 6;
inline void ActStatisticsRounds::clear_raise2_rounds() {
  raise2_rounds_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ActStatisticsRounds::raise2_rounds() const {
  // @@protoc_insertion_point(field_get:pbtodb.ActStatisticsRounds.raise2_rounds)
  return raise2_rounds_;
}
inline void ActStatisticsRounds::set_raise2_rounds(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  raise2_rounds_ = value;
  // @@protoc_insertion_point(field_set:pbtodb.ActStatisticsRounds.raise2_rounds)
}

// uint32 flop_raise_after_bet_rounds = 7;
inline void ActStatisticsRounds::clear_flop_raise_after_bet_rounds() {
  flop_raise_after_bet_rounds_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ActStatisticsRounds::flop_raise_after_bet_rounds() const {
  // @@protoc_insertion_point(field_get:pbtodb.ActStatisticsRounds.flop_raise_after_bet_rounds)
  return flop_raise_after_bet_rounds_;
}
inline void ActStatisticsRounds::set_flop_raise_after_bet_rounds(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  flop_raise_after_bet_rounds_ = value;
  // @@protoc_insertion_point(field_set:pbtodb.ActStatisticsRounds.flop_raise_after_bet_rounds)
}

// uint32 turn_raise_after_bet_rounds = 8;
inline void ActStatisticsRounds::clear_turn_raise_after_bet_rounds() {
  turn_raise_after_bet_rounds_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ActStatisticsRounds::turn_raise_after_bet_rounds() const {
  // @@protoc_insertion_point(field_get:pbtodb.ActStatisticsRounds.turn_raise_after_bet_rounds)
  return turn_raise_after_bet_rounds_;
}
inline void ActStatisticsRounds::set_turn_raise_after_bet_rounds(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  turn_raise_after_bet_rounds_ = value;
  // @@protoc_insertion_point(field_set:pbtodb.ActStatisticsRounds.turn_raise_after_bet_rounds)
}

// uint32 flop_raise_after_flod_rounds = 9;
inline void ActStatisticsRounds::clear_flop_raise_after_flod_rounds() {
  flop_raise_after_flod_rounds_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ActStatisticsRounds::flop_raise_after_flod_rounds() const {
  // @@protoc_insertion_point(field_get:pbtodb.ActStatisticsRounds.flop_raise_after_flod_rounds)
  return flop_raise_after_flod_rounds_;
}
inline void ActStatisticsRounds::set_flop_raise_after_flod_rounds(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  flop_raise_after_flod_rounds_ = value;
  // @@protoc_insertion_point(field_set:pbtodb.ActStatisticsRounds.flop_raise_after_flod_rounds)
}

// uint32 turn_raise_after_flod_rounds = 10;
inline void ActStatisticsRounds::clear_turn_raise_after_flod_rounds() {
  turn_raise_after_flod_rounds_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ActStatisticsRounds::turn_raise_after_flod_rounds() const {
  // @@protoc_insertion_point(field_get:pbtodb.ActStatisticsRounds.turn_raise_after_flod_rounds)
  return turn_raise_after_flod_rounds_;
}
inline void ActStatisticsRounds::set_turn_raise_after_flod_rounds(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  turn_raise_after_flod_rounds_ = value;
  // @@protoc_insertion_point(field_set:pbtodb.ActStatisticsRounds.turn_raise_after_flod_rounds)
}

// uint32 join_flop_rounds = 11;
inline void ActStatisticsRounds::clear_join_flop_rounds() {
  join_flop_rounds_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ActStatisticsRounds::join_flop_rounds() const {
  // @@protoc_insertion_point(field_get:pbtodb.ActStatisticsRounds.join_flop_rounds)
  return join_flop_rounds_;
}
inline void ActStatisticsRounds::set_join_flop_rounds(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  join_flop_rounds_ = value;
  // @@protoc_insertion_point(field_set:pbtodb.ActStatisticsRounds.join_flop_rounds)
}

// uint32 join_turn_rounds = 12;
inline void ActStatisticsRounds::clear_join_turn_rounds() {
  join_turn_rounds_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ActStatisticsRounds::join_turn_rounds() const {
  // @@protoc_insertion_point(field_get:pbtodb.ActStatisticsRounds.join_turn_rounds)
  return join_turn_rounds_;
}
inline void ActStatisticsRounds::set_join_turn_rounds(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  join_turn_rounds_ = value;
  // @@protoc_insertion_point(field_set:pbtodb.ActStatisticsRounds.join_turn_rounds)
}

// -------------------------------------------------------------------

// ActStatistics

// .pbtodb.ActStatisticsCount act_count = 1;
inline bool ActStatistics::has_act_count() const {
  return this != internal_default_instance() && act_count_ != nullptr;
}
inline void ActStatistics::clear_act_count() {
  if (GetArenaNoVirtual() == nullptr && act_count_ != nullptr) {
    delete act_count_;
  }
  act_count_ = nullptr;
}
inline const ::pbtodb::ActStatisticsCount& ActStatistics::act_count() const {
  const ::pbtodb::ActStatisticsCount* p = act_count_;
  // @@protoc_insertion_point(field_get:pbtodb.ActStatistics.act_count)
  return p != nullptr ? *p : *reinterpret_cast<const ::pbtodb::ActStatisticsCount*>(
      &::pbtodb::_ActStatisticsCount_default_instance_);
}
inline ::pbtodb::ActStatisticsCount* ActStatistics::release_act_count() {
  // @@protoc_insertion_point(field_release:pbtodb.ActStatistics.act_count)
  
  ::pbtodb::ActStatisticsCount* temp = act_count_;
  act_count_ = nullptr;
  return temp;
}
inline ::pbtodb::ActStatisticsCount* ActStatistics::mutable_act_count() {
  
  if (act_count_ == nullptr) {
    auto* p = CreateMaybeMessage<::pbtodb::ActStatisticsCount>(GetArenaNoVirtual());
    act_count_ = p;
  }
  // @@protoc_insertion_point(field_mutable:pbtodb.ActStatistics.act_count)
  return act_count_;
}
inline void ActStatistics::set_allocated_act_count(::pbtodb::ActStatisticsCount* act_count) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete act_count_;
  }
  if (act_count) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      act_count = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, act_count, submessage_arena);
    }
    
  } else {
    
  }
  act_count_ = act_count;
  // @@protoc_insertion_point(field_set_allocated:pbtodb.ActStatistics.act_count)
}

// .pbtodb.ActStatisticsRounds act_rounds = 2;
inline bool ActStatistics::has_act_rounds() const {
  return this != internal_default_instance() && act_rounds_ != nullptr;
}
inline void ActStatistics::clear_act_rounds() {
  if (GetArenaNoVirtual() == nullptr && act_rounds_ != nullptr) {
    delete act_rounds_;
  }
  act_rounds_ = nullptr;
}
inline const ::pbtodb::ActStatisticsRounds& ActStatistics::act_rounds() const {
  const ::pbtodb::ActStatisticsRounds* p = act_rounds_;
  // @@protoc_insertion_point(field_get:pbtodb.ActStatistics.act_rounds)
  return p != nullptr ? *p : *reinterpret_cast<const ::pbtodb::ActStatisticsRounds*>(
      &::pbtodb::_ActStatisticsRounds_default_instance_);
}
inline ::pbtodb::ActStatisticsRounds* ActStatistics::release_act_rounds() {
  // @@protoc_insertion_point(field_release:pbtodb.ActStatistics.act_rounds)
  
  ::pbtodb::ActStatisticsRounds* temp = act_rounds_;
  act_rounds_ = nullptr;
  return temp;
}
inline ::pbtodb::ActStatisticsRounds* ActStatistics::mutable_act_rounds() {
  
  if (act_rounds_ == nullptr) {
    auto* p = CreateMaybeMessage<::pbtodb::ActStatisticsRounds>(GetArenaNoVirtual());
    act_rounds_ = p;
  }
  // @@protoc_insertion_point(field_mutable:pbtodb.ActStatistics.act_rounds)
  return act_rounds_;
}
inline void ActStatistics::set_allocated_act_rounds(::pbtodb::ActStatisticsRounds* act_rounds) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete act_rounds_;
  }
  if (act_rounds) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      act_rounds = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, act_rounds, submessage_arena);
    }
    
  } else {
    
  }
  act_rounds_ = act_rounds;
  // @@protoc_insertion_point(field_set_allocated:pbtodb.ActStatistics.act_rounds)
}

// repeated uint32 blind_level_list = 3;
inline int ActStatistics::blind_level_list_size() const {
  return blind_level_list_.size();
}
inline void ActStatistics::clear_blind_level_list() {
  blind_level_list_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ActStatistics::blind_level_list(int index) const {
  // @@protoc_insertion_point(field_get:pbtodb.ActStatistics.blind_level_list)
  return blind_level_list_.Get(index);
}
inline void ActStatistics::set_blind_level_list(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  blind_level_list_.Set(index, value);
  // @@protoc_insertion_point(field_set:pbtodb.ActStatistics.blind_level_list)
}
inline void ActStatistics::add_blind_level_list(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  blind_level_list_.Add(value);
  // @@protoc_insertion_point(field_add:pbtodb.ActStatistics.blind_level_list)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
ActStatistics::blind_level_list() const {
  // @@protoc_insertion_point(field_list:pbtodb.ActStatistics.blind_level_list)
  return blind_level_list_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
ActStatistics::mutable_blind_level_list() {
  // @@protoc_insertion_point(field_mutable_list:pbtodb.ActStatistics.blind_level_list)
  return &blind_level_list_;
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// KoActStatistics

// map<int32, int64> mapMatchID = 1;
inline int KoActStatistics::mapmatchid_size() const {
  return mapmatchid_.size();
}
inline void KoActStatistics::clear_mapmatchid() {
  mapmatchid_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int64 >&
KoActStatistics::mapmatchid() const {
  // @@protoc_insertion_point(field_map:pbtodb.KoActStatistics.mapMatchID)
  return mapmatchid_.GetMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< ::PROTOBUF_NAMESPACE_ID::int32, ::PROTOBUF_NAMESPACE_ID::int64 >*
KoActStatistics::mutable_mapmatchid() {
  // @@protoc_insertion_point(field_mutable_map:pbtodb.KoActStatistics.mapMatchID)
  return mapmatchid_.MutableMap();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace pbtodb

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_pbtodb_2eproto
