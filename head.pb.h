// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: head.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_head_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_head_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_head_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_head_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_head_2eproto;
namespace XGameSoProto {
class TSoDebugCard;
class TSoDebugCardDefaultTypeInternal;
extern TSoDebugCardDefaultTypeInternal _TSoDebugCard_default_instance_;
class TSoDebugCard_Cards;
class TSoDebugCard_CardsDefaultTypeInternal;
extern TSoDebugCard_CardsDefaultTypeInternal _TSoDebugCard_Cards_default_instance_;
class TSoDebugCard_MDebugHdCardEntry_DoNotUse;
class TSoDebugCard_MDebugHdCardEntry_DoNotUseDefaultTypeInternal;
extern TSoDebugCard_MDebugHdCardEntry_DoNotUseDefaultTypeInternal _TSoDebugCard_MDebugHdCardEntry_DoNotUse_default_instance_;
class TSoMsg;
class TSoMsgDefaultTypeInternal;
extern TSoMsgDefaultTypeInternal _TSoMsg_default_instance_;
}  // namespace XGameSoProto
PROTOBUF_NAMESPACE_OPEN
template<> ::XGameSoProto::TSoDebugCard* Arena::CreateMaybeMessage<::XGameSoProto::TSoDebugCard>(Arena*);
template<> ::XGameSoProto::TSoDebugCard_Cards* Arena::CreateMaybeMessage<::XGameSoProto::TSoDebugCard_Cards>(Arena*);
template<> ::XGameSoProto::TSoDebugCard_MDebugHdCardEntry_DoNotUse* Arena::CreateMaybeMessage<::XGameSoProto::TSoDebugCard_MDebugHdCardEntry_DoNotUse>(Arena*);
template<> ::XGameSoProto::TSoMsg* Arena::CreateMaybeMessage<::XGameSoProto::TSoMsg>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace XGameSoProto {

// ===================================================================

class TSoMsg :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:XGameSoProto.TSoMsg) */ {
 public:
  TSoMsg();
  virtual ~TSoMsg();

  TSoMsg(const TSoMsg& from);
  TSoMsg(TSoMsg&& from) noexcept
    : TSoMsg() {
    *this = ::std::move(from);
  }

  inline TSoMsg& operator=(const TSoMsg& from) {
    CopyFrom(from);
    return *this;
  }
  inline TSoMsg& operator=(TSoMsg&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TSoMsg& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TSoMsg* internal_default_instance() {
    return reinterpret_cast<const TSoMsg*>(
               &_TSoMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(TSoMsg& a, TSoMsg& b) {
    a.Swap(&b);
  }
  inline void Swap(TSoMsg* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TSoMsg* New() const final {
    return CreateMaybeMessage<TSoMsg>(nullptr);
  }

  TSoMsg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TSoMsg>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TSoMsg& from);
  void MergeFrom(const TSoMsg& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TSoMsg* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "XGameSoProto.TSoMsg";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_head_2eproto);
    return ::descriptor_table_head_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVecMsgDataFieldNumber = 3,
    kNVerFieldNumber = 1,
    kNCmdFieldNumber = 2,
  };
  // bytes vecMsgData = 3;
  void clear_vecmsgdata();
  const std::string& vecmsgdata() const;
  void set_vecmsgdata(const std::string& value);
  void set_vecmsgdata(std::string&& value);
  void set_vecmsgdata(const char* value);
  void set_vecmsgdata(const void* value, size_t size);
  std::string* mutable_vecmsgdata();
  std::string* release_vecmsgdata();
  void set_allocated_vecmsgdata(std::string* vecmsgdata);

  // sint32 nVer = 1;
  void clear_nver();
  ::PROTOBUF_NAMESPACE_ID::int32 nver() const;
  void set_nver(::PROTOBUF_NAMESPACE_ID::int32 value);

  // sint32 nCmd = 2;
  void clear_ncmd();
  ::PROTOBUF_NAMESPACE_ID::int32 ncmd() const;
  void set_ncmd(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:XGameSoProto.TSoMsg)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr vecmsgdata_;
  ::PROTOBUF_NAMESPACE_ID::int32 nver_;
  ::PROTOBUF_NAMESPACE_ID::int32 ncmd_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_head_2eproto;
};
// -------------------------------------------------------------------

class TSoDebugCard_Cards :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:XGameSoProto.TSoDebugCard.Cards) */ {
 public:
  TSoDebugCard_Cards();
  virtual ~TSoDebugCard_Cards();

  TSoDebugCard_Cards(const TSoDebugCard_Cards& from);
  TSoDebugCard_Cards(TSoDebugCard_Cards&& from) noexcept
    : TSoDebugCard_Cards() {
    *this = ::std::move(from);
  }

  inline TSoDebugCard_Cards& operator=(const TSoDebugCard_Cards& from) {
    CopyFrom(from);
    return *this;
  }
  inline TSoDebugCard_Cards& operator=(TSoDebugCard_Cards&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TSoDebugCard_Cards& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TSoDebugCard_Cards* internal_default_instance() {
    return reinterpret_cast<const TSoDebugCard_Cards*>(
               &_TSoDebugCard_Cards_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(TSoDebugCard_Cards& a, TSoDebugCard_Cards& b) {
    a.Swap(&b);
  }
  inline void Swap(TSoDebugCard_Cards* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TSoDebugCard_Cards* New() const final {
    return CreateMaybeMessage<TSoDebugCard_Cards>(nullptr);
  }

  TSoDebugCard_Cards* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TSoDebugCard_Cards>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TSoDebugCard_Cards& from);
  void MergeFrom(const TSoDebugCard_Cards& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TSoDebugCard_Cards* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "XGameSoProto.TSoDebugCard.Cards";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_head_2eproto);
    return ::descriptor_table_head_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVCardsFieldNumber = 1,
  };
  // repeated string vCards = 1;
  int vcards_size() const;
  void clear_vcards();
  const std::string& vcards(int index) const;
  std::string* mutable_vcards(int index);
  void set_vcards(int index, const std::string& value);
  void set_vcards(int index, std::string&& value);
  void set_vcards(int index, const char* value);
  void set_vcards(int index, const char* value, size_t size);
  std::string* add_vcards();
  void add_vcards(const std::string& value);
  void add_vcards(std::string&& value);
  void add_vcards(const char* value);
  void add_vcards(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& vcards() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_vcards();

  // @@protoc_insertion_point(class_scope:XGameSoProto.TSoDebugCard.Cards)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> vcards_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_head_2eproto;
};
// -------------------------------------------------------------------

class TSoDebugCard_MDebugHdCardEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<TSoDebugCard_MDebugHdCardEntry_DoNotUse, 
    std::string, ::XGameSoProto::TSoDebugCard_Cards,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<TSoDebugCard_MDebugHdCardEntry_DoNotUse, 
    std::string, ::XGameSoProto::TSoDebugCard_Cards,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
    0 > SuperType;
  TSoDebugCard_MDebugHdCardEntry_DoNotUse();
  TSoDebugCard_MDebugHdCardEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const TSoDebugCard_MDebugHdCardEntry_DoNotUse& other);
  static const TSoDebugCard_MDebugHdCardEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const TSoDebugCard_MDebugHdCardEntry_DoNotUse*>(&_TSoDebugCard_MDebugHdCardEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), s->size(), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "XGameSoProto.TSoDebugCard.MDebugHdCardEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& other) final;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_head_2eproto);
    return ::descriptor_table_head_2eproto.file_level_metadata[2];
  }

  public:
};

// -------------------------------------------------------------------

class TSoDebugCard :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:XGameSoProto.TSoDebugCard) */ {
 public:
  TSoDebugCard();
  virtual ~TSoDebugCard();

  TSoDebugCard(const TSoDebugCard& from);
  TSoDebugCard(TSoDebugCard&& from) noexcept
    : TSoDebugCard() {
    *this = ::std::move(from);
  }

  inline TSoDebugCard& operator=(const TSoDebugCard& from) {
    CopyFrom(from);
    return *this;
  }
  inline TSoDebugCard& operator=(TSoDebugCard&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TSoDebugCard& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TSoDebugCard* internal_default_instance() {
    return reinterpret_cast<const TSoDebugCard*>(
               &_TSoDebugCard_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(TSoDebugCard& a, TSoDebugCard& b) {
    a.Swap(&b);
  }
  inline void Swap(TSoDebugCard* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TSoDebugCard* New() const final {
    return CreateMaybeMessage<TSoDebugCard>(nullptr);
  }

  TSoDebugCard* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TSoDebugCard>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TSoDebugCard& from);
  void MergeFrom(const TSoDebugCard& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TSoDebugCard* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "XGameSoProto.TSoDebugCard";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_head_2eproto);
    return ::descriptor_table_head_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef TSoDebugCard_Cards Cards;

  // accessors -------------------------------------------------------

  enum : int {
    kMDebugHdCardFieldNumber = 1,
    kMDebugCommCardFieldNumber = 2,
  };
  // map<string, .XGameSoProto.TSoDebugCard.Cards> mDebugHdCard = 1;
  int mdebughdcard_size() const;
  void clear_mdebughdcard();
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::XGameSoProto::TSoDebugCard_Cards >&
      mdebughdcard() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::XGameSoProto::TSoDebugCard_Cards >*
      mutable_mdebughdcard();

  // .XGameSoProto.TSoDebugCard.Cards mDebugCommCard = 2;
  bool has_mdebugcommcard() const;
  void clear_mdebugcommcard();
  const ::XGameSoProto::TSoDebugCard_Cards& mdebugcommcard() const;
  ::XGameSoProto::TSoDebugCard_Cards* release_mdebugcommcard();
  ::XGameSoProto::TSoDebugCard_Cards* mutable_mdebugcommcard();
  void set_allocated_mdebugcommcard(::XGameSoProto::TSoDebugCard_Cards* mdebugcommcard);

  // @@protoc_insertion_point(class_scope:XGameSoProto.TSoDebugCard)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::MapField<
      TSoDebugCard_MDebugHdCardEntry_DoNotUse,
      std::string, ::XGameSoProto::TSoDebugCard_Cards,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_MESSAGE,
      0 > mdebughdcard_;
  ::XGameSoProto::TSoDebugCard_Cards* mdebugcommcard_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_head_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TSoMsg

// sint32 nVer = 1;
inline void TSoMsg::clear_nver() {
  nver_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TSoMsg::nver() const {
  // @@protoc_insertion_point(field_get:XGameSoProto.TSoMsg.nVer)
  return nver_;
}
inline void TSoMsg::set_nver(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  nver_ = value;
  // @@protoc_insertion_point(field_set:XGameSoProto.TSoMsg.nVer)
}

// sint32 nCmd = 2;
inline void TSoMsg::clear_ncmd() {
  ncmd_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TSoMsg::ncmd() const {
  // @@protoc_insertion_point(field_get:XGameSoProto.TSoMsg.nCmd)
  return ncmd_;
}
inline void TSoMsg::set_ncmd(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  ncmd_ = value;
  // @@protoc_insertion_point(field_set:XGameSoProto.TSoMsg.nCmd)
}

// bytes vecMsgData = 3;
inline void TSoMsg::clear_vecmsgdata() {
  vecmsgdata_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& TSoMsg::vecmsgdata() const {
  // @@protoc_insertion_point(field_get:XGameSoProto.TSoMsg.vecMsgData)
  return vecmsgdata_.GetNoArena();
}
inline void TSoMsg::set_vecmsgdata(const std::string& value) {
  
  vecmsgdata_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:XGameSoProto.TSoMsg.vecMsgData)
}
inline void TSoMsg::set_vecmsgdata(std::string&& value) {
  
  vecmsgdata_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:XGameSoProto.TSoMsg.vecMsgData)
}
inline void TSoMsg::set_vecmsgdata(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  vecmsgdata_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:XGameSoProto.TSoMsg.vecMsgData)
}
inline void TSoMsg::set_vecmsgdata(const void* value, size_t size) {
  
  vecmsgdata_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:XGameSoProto.TSoMsg.vecMsgData)
}
inline std::string* TSoMsg::mutable_vecmsgdata() {
  
  // @@protoc_insertion_point(field_mutable:XGameSoProto.TSoMsg.vecMsgData)
  return vecmsgdata_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TSoMsg::release_vecmsgdata() {
  // @@protoc_insertion_point(field_release:XGameSoProto.TSoMsg.vecMsgData)
  
  return vecmsgdata_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TSoMsg::set_allocated_vecmsgdata(std::string* vecmsgdata) {
  if (vecmsgdata != nullptr) {
    
  } else {
    
  }
  vecmsgdata_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), vecmsgdata);
  // @@protoc_insertion_point(field_set_allocated:XGameSoProto.TSoMsg.vecMsgData)
}

// -------------------------------------------------------------------

// TSoDebugCard_Cards

// repeated string vCards = 1;
inline int TSoDebugCard_Cards::vcards_size() const {
  return vcards_.size();
}
inline void TSoDebugCard_Cards::clear_vcards() {
  vcards_.Clear();
}
inline const std::string& TSoDebugCard_Cards::vcards(int index) const {
  // @@protoc_insertion_point(field_get:XGameSoProto.TSoDebugCard.Cards.vCards)
  return vcards_.Get(index);
}
inline std::string* TSoDebugCard_Cards::mutable_vcards(int index) {
  // @@protoc_insertion_point(field_mutable:XGameSoProto.TSoDebugCard.Cards.vCards)
  return vcards_.Mutable(index);
}
inline void TSoDebugCard_Cards::set_vcards(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:XGameSoProto.TSoDebugCard.Cards.vCards)
  vcards_.Mutable(index)->assign(value);
}
inline void TSoDebugCard_Cards::set_vcards(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:XGameSoProto.TSoDebugCard.Cards.vCards)
  vcards_.Mutable(index)->assign(std::move(value));
}
inline void TSoDebugCard_Cards::set_vcards(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  vcards_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:XGameSoProto.TSoDebugCard.Cards.vCards)
}
inline void TSoDebugCard_Cards::set_vcards(int index, const char* value, size_t size) {
  vcards_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:XGameSoProto.TSoDebugCard.Cards.vCards)
}
inline std::string* TSoDebugCard_Cards::add_vcards() {
  // @@protoc_insertion_point(field_add_mutable:XGameSoProto.TSoDebugCard.Cards.vCards)
  return vcards_.Add();
}
inline void TSoDebugCard_Cards::add_vcards(const std::string& value) {
  vcards_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:XGameSoProto.TSoDebugCard.Cards.vCards)
}
inline void TSoDebugCard_Cards::add_vcards(std::string&& value) {
  vcards_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:XGameSoProto.TSoDebugCard.Cards.vCards)
}
inline void TSoDebugCard_Cards::add_vcards(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  vcards_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:XGameSoProto.TSoDebugCard.Cards.vCards)
}
inline void TSoDebugCard_Cards::add_vcards(const char* value, size_t size) {
  vcards_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:XGameSoProto.TSoDebugCard.Cards.vCards)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
TSoDebugCard_Cards::vcards() const {
  // @@protoc_insertion_point(field_list:XGameSoProto.TSoDebugCard.Cards.vCards)
  return vcards_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
TSoDebugCard_Cards::mutable_vcards() {
  // @@protoc_insertion_point(field_mutable_list:XGameSoProto.TSoDebugCard.Cards.vCards)
  return &vcards_;
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// TSoDebugCard

// map<string, .XGameSoProto.TSoDebugCard.Cards> mDebugHdCard = 1;
inline int TSoDebugCard::mdebughdcard_size() const {
  return mdebughdcard_.size();
}
inline void TSoDebugCard::clear_mdebughdcard() {
  mdebughdcard_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::XGameSoProto::TSoDebugCard_Cards >&
TSoDebugCard::mdebughdcard() const {
  // @@protoc_insertion_point(field_map:XGameSoProto.TSoDebugCard.mDebugHdCard)
  return mdebughdcard_.GetMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, ::XGameSoProto::TSoDebugCard_Cards >*
TSoDebugCard::mutable_mdebughdcard() {
  // @@protoc_insertion_point(field_mutable_map:XGameSoProto.TSoDebugCard.mDebugHdCard)
  return mdebughdcard_.MutableMap();
}

// .XGameSoProto.TSoDebugCard.Cards mDebugCommCard = 2;
inline bool TSoDebugCard::has_mdebugcommcard() const {
  return this != internal_default_instance() && mdebugcommcard_ != nullptr;
}
inline void TSoDebugCard::clear_mdebugcommcard() {
  if (GetArenaNoVirtual() == nullptr && mdebugcommcard_ != nullptr) {
    delete mdebugcommcard_;
  }
  mdebugcommcard_ = nullptr;
}
inline const ::XGameSoProto::TSoDebugCard_Cards& TSoDebugCard::mdebugcommcard() const {
  const ::XGameSoProto::TSoDebugCard_Cards* p = mdebugcommcard_;
  // @@protoc_insertion_point(field_get:XGameSoProto.TSoDebugCard.mDebugCommCard)
  return p != nullptr ? *p : *reinterpret_cast<const ::XGameSoProto::TSoDebugCard_Cards*>(
      &::XGameSoProto::_TSoDebugCard_Cards_default_instance_);
}
inline ::XGameSoProto::TSoDebugCard_Cards* TSoDebugCard::release_mdebugcommcard() {
  // @@protoc_insertion_point(field_release:XGameSoProto.TSoDebugCard.mDebugCommCard)
  
  ::XGameSoProto::TSoDebugCard_Cards* temp = mdebugcommcard_;
  mdebugcommcard_ = nullptr;
  return temp;
}
inline ::XGameSoProto::TSoDebugCard_Cards* TSoDebugCard::mutable_mdebugcommcard() {
  
  if (mdebugcommcard_ == nullptr) {
    auto* p = CreateMaybeMessage<::XGameSoProto::TSoDebugCard_Cards>(GetArenaNoVirtual());
    mdebugcommcard_ = p;
  }
  // @@protoc_insertion_point(field_mutable:XGameSoProto.TSoDebugCard.mDebugCommCard)
  return mdebugcommcard_;
}
inline void TSoDebugCard::set_allocated_mdebugcommcard(::XGameSoProto::TSoDebugCard_Cards* mdebugcommcard) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete mdebugcommcard_;
  }
  if (mdebugcommcard) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      mdebugcommcard = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mdebugcommcard, submessage_arena);
    }
    
  } else {
    
  }
  mdebugcommcard_ = mdebugcommcard;
  // @@protoc_insertion_point(field_set_allocated:XGameSoProto.TSoDebugCard.mDebugCommCard)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace XGameSoProto

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_head_2eproto
