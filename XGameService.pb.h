// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: XGameService.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_XGameService_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_XGameService_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_XGameService_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_XGameService_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_XGameService_2eproto;
namespace XGameComm {
class MessageRequest;
class MessageRequestDefaultTypeInternal;
extern MessageRequestDefaultTypeInternal _MessageRequest_default_instance_;
class MessageResponse;
class MessageResponseDefaultTypeInternal;
extern MessageResponseDefaultTypeInternal _MessageResponse_default_instance_;
}  // namespace XGameComm
PROTOBUF_NAMESPACE_OPEN
template<> ::XGameComm::MessageRequest* Arena::CreateMaybeMessage<::XGameComm::MessageRequest>(Arena*);
template<> ::XGameComm::MessageResponse* Arena::CreateMaybeMessage<::XGameComm::MessageResponse>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace XGameComm {

// ===================================================================

class MessageRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:XGameComm.MessageRequest) */ {
 public:
  MessageRequest();
  virtual ~MessageRequest();

  MessageRequest(const MessageRequest& from);
  MessageRequest(MessageRequest&& from) noexcept
    : MessageRequest() {
    *this = ::std::move(from);
  }

  inline MessageRequest& operator=(const MessageRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline MessageRequest& operator=(MessageRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MessageRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MessageRequest* internal_default_instance() {
    return reinterpret_cast<const MessageRequest*>(
               &_MessageRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(MessageRequest& a, MessageRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(MessageRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MessageRequest* New() const final {
    return CreateMaybeMessage<MessageRequest>(nullptr);
  }

  MessageRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MessageRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MessageRequest& from);
  void MergeFrom(const MessageRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MessageRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "XGameComm.MessageRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_XGameService_2eproto);
    return ::descriptor_table_XGameService_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSMsgPackFieldNumber = 2,
    kSPushAddrFieldNumber = 3,
    kLUinFieldNumber = 1,
  };
  // string sMsgPack = 2;
  void clear_smsgpack();
  const std::string& smsgpack() const;
  void set_smsgpack(const std::string& value);
  void set_smsgpack(std::string&& value);
  void set_smsgpack(const char* value);
  void set_smsgpack(const char* value, size_t size);
  std::string* mutable_smsgpack();
  std::string* release_smsgpack();
  void set_allocated_smsgpack(std::string* smsgpack);

  // string sPushAddr = 3;
  void clear_spushaddr();
  const std::string& spushaddr() const;
  void set_spushaddr(const std::string& value);
  void set_spushaddr(std::string&& value);
  void set_spushaddr(const char* value);
  void set_spushaddr(const char* value, size_t size);
  std::string* mutable_spushaddr();
  std::string* release_spushaddr();
  void set_allocated_spushaddr(std::string* spushaddr);

  // sint64 lUin = 1;
  void clear_luin();
  ::PROTOBUF_NAMESPACE_ID::int64 luin() const;
  void set_luin(::PROTOBUF_NAMESPACE_ID::int64 value);

  // @@protoc_insertion_point(class_scope:XGameComm.MessageRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr smsgpack_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr spushaddr_;
  ::PROTOBUF_NAMESPACE_ID::int64 luin_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_XGameService_2eproto;
};
// -------------------------------------------------------------------

class MessageResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:XGameComm.MessageResponse) */ {
 public:
  MessageResponse();
  virtual ~MessageResponse();

  MessageResponse(const MessageResponse& from);
  MessageResponse(MessageResponse&& from) noexcept
    : MessageResponse() {
    *this = ::std::move(from);
  }

  inline MessageResponse& operator=(const MessageResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline MessageResponse& operator=(MessageResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MessageResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MessageResponse* internal_default_instance() {
    return reinterpret_cast<const MessageResponse*>(
               &_MessageResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(MessageResponse& a, MessageResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(MessageResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MessageResponse* New() const final {
    return CreateMaybeMessage<MessageResponse>(nullptr);
  }

  MessageResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MessageResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MessageResponse& from);
  void MergeFrom(const MessageResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MessageResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "XGameComm.MessageResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_XGameService_2eproto);
    return ::descriptor_table_XGameService_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSMsgPackFieldNumber = 2,
    kLUinFieldNumber = 1,
  };
  // string sMsgPack = 2;
  void clear_smsgpack();
  const std::string& smsgpack() const;
  void set_smsgpack(const std::string& value);
  void set_smsgpack(std::string&& value);
  void set_smsgpack(const char* value);
  void set_smsgpack(const char* value, size_t size);
  std::string* mutable_smsgpack();
  std::string* release_smsgpack();
  void set_allocated_smsgpack(std::string* smsgpack);

  // sint64 lUin = 1;
  void clear_luin();
  ::PROTOBUF_NAMESPACE_ID::int64 luin() const;
  void set_luin(::PROTOBUF_NAMESPACE_ID::int64 value);

  // @@protoc_insertion_point(class_scope:XGameComm.MessageResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr smsgpack_;
  ::PROTOBUF_NAMESPACE_ID::int64 luin_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_XGameService_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MessageRequest

// sint64 lUin = 1;
inline void MessageRequest::clear_luin() {
  luin_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MessageRequest::luin() const {
  // @@protoc_insertion_point(field_get:XGameComm.MessageRequest.lUin)
  return luin_;
}
inline void MessageRequest::set_luin(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  luin_ = value;
  // @@protoc_insertion_point(field_set:XGameComm.MessageRequest.lUin)
}

// string sMsgPack = 2;
inline void MessageRequest::clear_smsgpack() {
  smsgpack_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& MessageRequest::smsgpack() const {
  // @@protoc_insertion_point(field_get:XGameComm.MessageRequest.sMsgPack)
  return smsgpack_.GetNoArena();
}
inline void MessageRequest::set_smsgpack(const std::string& value) {
  
  smsgpack_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:XGameComm.MessageRequest.sMsgPack)
}
inline void MessageRequest::set_smsgpack(std::string&& value) {
  
  smsgpack_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:XGameComm.MessageRequest.sMsgPack)
}
inline void MessageRequest::set_smsgpack(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  smsgpack_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:XGameComm.MessageRequest.sMsgPack)
}
inline void MessageRequest::set_smsgpack(const char* value, size_t size) {
  
  smsgpack_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:XGameComm.MessageRequest.sMsgPack)
}
inline std::string* MessageRequest::mutable_smsgpack() {
  
  // @@protoc_insertion_point(field_mutable:XGameComm.MessageRequest.sMsgPack)
  return smsgpack_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MessageRequest::release_smsgpack() {
  // @@protoc_insertion_point(field_release:XGameComm.MessageRequest.sMsgPack)
  
  return smsgpack_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MessageRequest::set_allocated_smsgpack(std::string* smsgpack) {
  if (smsgpack != nullptr) {
    
  } else {
    
  }
  smsgpack_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), smsgpack);
  // @@protoc_insertion_point(field_set_allocated:XGameComm.MessageRequest.sMsgPack)
}

// string sPushAddr = 3;
inline void MessageRequest::clear_spushaddr() {
  spushaddr_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& MessageRequest::spushaddr() const {
  // @@protoc_insertion_point(field_get:XGameComm.MessageRequest.sPushAddr)
  return spushaddr_.GetNoArena();
}
inline void MessageRequest::set_spushaddr(const std::string& value) {
  
  spushaddr_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:XGameComm.MessageRequest.sPushAddr)
}
inline void MessageRequest::set_spushaddr(std::string&& value) {
  
  spushaddr_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:XGameComm.MessageRequest.sPushAddr)
}
inline void MessageRequest::set_spushaddr(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  spushaddr_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:XGameComm.MessageRequest.sPushAddr)
}
inline void MessageRequest::set_spushaddr(const char* value, size_t size) {
  
  spushaddr_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:XGameComm.MessageRequest.sPushAddr)
}
inline std::string* MessageRequest::mutable_spushaddr() {
  
  // @@protoc_insertion_point(field_mutable:XGameComm.MessageRequest.sPushAddr)
  return spushaddr_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MessageRequest::release_spushaddr() {
  // @@protoc_insertion_point(field_release:XGameComm.MessageRequest.sPushAddr)
  
  return spushaddr_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MessageRequest::set_allocated_spushaddr(std::string* spushaddr) {
  if (spushaddr != nullptr) {
    
  } else {
    
  }
  spushaddr_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), spushaddr);
  // @@protoc_insertion_point(field_set_allocated:XGameComm.MessageRequest.sPushAddr)
}

// -------------------------------------------------------------------

// MessageResponse

// sint64 lUin = 1;
inline void MessageResponse::clear_luin() {
  luin_ = PROTOBUF_LONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::int64 MessageResponse::luin() const {
  // @@protoc_insertion_point(field_get:XGameComm.MessageResponse.lUin)
  return luin_;
}
inline void MessageResponse::set_luin(::PROTOBUF_NAMESPACE_ID::int64 value) {
  
  luin_ = value;
  // @@protoc_insertion_point(field_set:XGameComm.MessageResponse.lUin)
}

// string sMsgPack = 2;
inline void MessageResponse::clear_smsgpack() {
  smsgpack_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& MessageResponse::smsgpack() const {
  // @@protoc_insertion_point(field_get:XGameComm.MessageResponse.sMsgPack)
  return smsgpack_.GetNoArena();
}
inline void MessageResponse::set_smsgpack(const std::string& value) {
  
  smsgpack_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:XGameComm.MessageResponse.sMsgPack)
}
inline void MessageResponse::set_smsgpack(std::string&& value) {
  
  smsgpack_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:XGameComm.MessageResponse.sMsgPack)
}
inline void MessageResponse::set_smsgpack(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  smsgpack_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:XGameComm.MessageResponse.sMsgPack)
}
inline void MessageResponse::set_smsgpack(const char* value, size_t size) {
  
  smsgpack_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:XGameComm.MessageResponse.sMsgPack)
}
inline std::string* MessageResponse::mutable_smsgpack() {
  
  // @@protoc_insertion_point(field_mutable:XGameComm.MessageResponse.sMsgPack)
  return smsgpack_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MessageResponse::release_smsgpack() {
  // @@protoc_insertion_point(field_release:XGameComm.MessageResponse.sMsgPack)
  
  return smsgpack_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MessageResponse::set_allocated_smsgpack(std::string* smsgpack) {
  if (smsgpack != nullptr) {
    
  } else {
    
  }
  smsgpack_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), smsgpack);
  // @@protoc_insertion_point(field_set_allocated:XGameComm.MessageResponse.sMsgPack)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace XGameComm

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_XGameService_2eproto
