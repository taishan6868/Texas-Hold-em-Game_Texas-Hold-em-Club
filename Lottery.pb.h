// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Lottery.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Lottery_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Lottery_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Lottery_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Lottery_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Lottery_2eproto;
namespace LotteryProto {
class LotteryReq;
class LotteryReqDefaultTypeInternal;
extern LotteryReqDefaultTypeInternal _LotteryReq_default_instance_;
class LotteryResp;
class LotteryRespDefaultTypeInternal;
extern LotteryRespDefaultTypeInternal _LotteryResp_default_instance_;
class QueryLotteryDetailResp;
class QueryLotteryDetailRespDefaultTypeInternal;
extern QueryLotteryDetailRespDefaultTypeInternal _QueryLotteryDetailResp_default_instance_;
class RewardItem;
class RewardItemDefaultTypeInternal;
extern RewardItemDefaultTypeInternal _RewardItem_default_instance_;
}  // namespace LotteryProto
PROTOBUF_NAMESPACE_OPEN
template<> ::LotteryProto::LotteryReq* Arena::CreateMaybeMessage<::LotteryProto::LotteryReq>(Arena*);
template<> ::LotteryProto::LotteryResp* Arena::CreateMaybeMessage<::LotteryProto::LotteryResp>(Arena*);
template<> ::LotteryProto::QueryLotteryDetailResp* Arena::CreateMaybeMessage<::LotteryProto::QueryLotteryDetailResp>(Arena*);
template<> ::LotteryProto::RewardItem* Arena::CreateMaybeMessage<::LotteryProto::RewardItem>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace LotteryProto {

enum E_LOTTERY_TYPE : int {
  E_LOTTERY_NONE = 0,
  E_LOTTERY_FREE = 1,
  E_LOTTERY_SUPER = 99,
  E_LOTTERY_LOOP = 2,
  E_LOTTERY_FIRST_TIME = 3,
  E_LOTTERY_TYPE_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  E_LOTTERY_TYPE_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool E_LOTTERY_TYPE_IsValid(int value);
constexpr E_LOTTERY_TYPE E_LOTTERY_TYPE_MIN = E_LOTTERY_NONE;
constexpr E_LOTTERY_TYPE E_LOTTERY_TYPE_MAX = E_LOTTERY_SUPER;
constexpr int E_LOTTERY_TYPE_ARRAYSIZE = E_LOTTERY_TYPE_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* E_LOTTERY_TYPE_descriptor();
template<typename T>
inline const std::string& E_LOTTERY_TYPE_Name(T enum_t_value) {
  static_assert(::std::is_same<T, E_LOTTERY_TYPE>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function E_LOTTERY_TYPE_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    E_LOTTERY_TYPE_descriptor(), enum_t_value);
}
inline bool E_LOTTERY_TYPE_Parse(
    const std::string& name, E_LOTTERY_TYPE* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<E_LOTTERY_TYPE>(
    E_LOTTERY_TYPE_descriptor(), name, value);
}
// ===================================================================

class LotteryReq :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:LotteryProto.LotteryReq) */ {
 public:
  LotteryReq();
  virtual ~LotteryReq();

  LotteryReq(const LotteryReq& from);
  LotteryReq(LotteryReq&& from) noexcept
    : LotteryReq() {
    *this = ::std::move(from);
  }

  inline LotteryReq& operator=(const LotteryReq& from) {
    CopyFrom(from);
    return *this;
  }
  inline LotteryReq& operator=(LotteryReq&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LotteryReq& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LotteryReq* internal_default_instance() {
    return reinterpret_cast<const LotteryReq*>(
               &_LotteryReq_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(LotteryReq& a, LotteryReq& b) {
    a.Swap(&b);
  }
  inline void Swap(LotteryReq* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LotteryReq* New() const final {
    return CreateMaybeMessage<LotteryReq>(nullptr);
  }

  LotteryReq* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LotteryReq>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LotteryReq& from);
  void MergeFrom(const LotteryReq& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LotteryReq* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "LotteryProto.LotteryReq";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Lottery_2eproto);
    return ::descriptor_table_Lottery_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRotateTypeFieldNumber = 1,
  };
  // .LotteryProto.E_LOTTERY_TYPE rotateType = 1;
  void clear_rotatetype();
  ::LotteryProto::E_LOTTERY_TYPE rotatetype() const;
  void set_rotatetype(::LotteryProto::E_LOTTERY_TYPE value);

  // @@protoc_insertion_point(class_scope:LotteryProto.LotteryReq)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  int rotatetype_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Lottery_2eproto;
};
// -------------------------------------------------------------------

class LotteryResp :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:LotteryProto.LotteryResp) */ {
 public:
  LotteryResp();
  virtual ~LotteryResp();

  LotteryResp(const LotteryResp& from);
  LotteryResp(LotteryResp&& from) noexcept
    : LotteryResp() {
    *this = ::std::move(from);
  }

  inline LotteryResp& operator=(const LotteryResp& from) {
    CopyFrom(from);
    return *this;
  }
  inline LotteryResp& operator=(LotteryResp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LotteryResp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LotteryResp* internal_default_instance() {
    return reinterpret_cast<const LotteryResp*>(
               &_LotteryResp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(LotteryResp& a, LotteryResp& b) {
    a.Swap(&b);
  }
  inline void Swap(LotteryResp* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LotteryResp* New() const final {
    return CreateMaybeMessage<LotteryResp>(nullptr);
  }

  LotteryResp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LotteryResp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LotteryResp& from);
  void MergeFrom(const LotteryResp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LotteryResp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "LotteryProto.LotteryResp";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Lottery_2eproto);
    return ::descriptor_table_Lottery_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResultCodeFieldNumber = 1,
    kRewardIdFieldNumber = 2,
  };
  // sint32 resultCode = 1;
  void clear_resultcode();
  ::PROTOBUF_NAMESPACE_ID::int32 resultcode() const;
  void set_resultcode(::PROTOBUF_NAMESPACE_ID::int32 value);

  // sint32 rewardId = 2;
  void clear_rewardid();
  ::PROTOBUF_NAMESPACE_ID::int32 rewardid() const;
  void set_rewardid(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:LotteryProto.LotteryResp)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 resultcode_;
  ::PROTOBUF_NAMESPACE_ID::int32 rewardid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Lottery_2eproto;
};
// -------------------------------------------------------------------

class RewardItem :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:LotteryProto.RewardItem) */ {
 public:
  RewardItem();
  virtual ~RewardItem();

  RewardItem(const RewardItem& from);
  RewardItem(RewardItem&& from) noexcept
    : RewardItem() {
    *this = ::std::move(from);
  }

  inline RewardItem& operator=(const RewardItem& from) {
    CopyFrom(from);
    return *this;
  }
  inline RewardItem& operator=(RewardItem&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RewardItem& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RewardItem* internal_default_instance() {
    return reinterpret_cast<const RewardItem*>(
               &_RewardItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(RewardItem& a, RewardItem& b) {
    a.Swap(&b);
  }
  inline void Swap(RewardItem* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RewardItem* New() const final {
    return CreateMaybeMessage<RewardItem>(nullptr);
  }

  RewardItem* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RewardItem>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RewardItem& from);
  void MergeFrom(const RewardItem& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RewardItem* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "LotteryProto.RewardItem";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Lottery_2eproto);
    return ::descriptor_table_Lottery_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kGoodsIDFieldNumber = 1,
    kCountFieldNumber = 2,
    kRewardIdFieldNumber = 3,
  };
  // sint32 goodsID = 1;
  void clear_goodsid();
  ::PROTOBUF_NAMESPACE_ID::int32 goodsid() const;
  void set_goodsid(::PROTOBUF_NAMESPACE_ID::int32 value);

  // sint32 count = 2;
  void clear_count();
  ::PROTOBUF_NAMESPACE_ID::int32 count() const;
  void set_count(::PROTOBUF_NAMESPACE_ID::int32 value);

  // sint32 rewardId = 3;
  void clear_rewardid();
  ::PROTOBUF_NAMESPACE_ID::int32 rewardid() const;
  void set_rewardid(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:LotteryProto.RewardItem)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 goodsid_;
  ::PROTOBUF_NAMESPACE_ID::int32 count_;
  ::PROTOBUF_NAMESPACE_ID::int32 rewardid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Lottery_2eproto;
};
// -------------------------------------------------------------------

class QueryLotteryDetailResp :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:LotteryProto.QueryLotteryDetailResp) */ {
 public:
  QueryLotteryDetailResp();
  virtual ~QueryLotteryDetailResp();

  QueryLotteryDetailResp(const QueryLotteryDetailResp& from);
  QueryLotteryDetailResp(QueryLotteryDetailResp&& from) noexcept
    : QueryLotteryDetailResp() {
    *this = ::std::move(from);
  }

  inline QueryLotteryDetailResp& operator=(const QueryLotteryDetailResp& from) {
    CopyFrom(from);
    return *this;
  }
  inline QueryLotteryDetailResp& operator=(QueryLotteryDetailResp&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const QueryLotteryDetailResp& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const QueryLotteryDetailResp* internal_default_instance() {
    return reinterpret_cast<const QueryLotteryDetailResp*>(
               &_QueryLotteryDetailResp_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(QueryLotteryDetailResp& a, QueryLotteryDetailResp& b) {
    a.Swap(&b);
  }
  inline void Swap(QueryLotteryDetailResp* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline QueryLotteryDetailResp* New() const final {
    return CreateMaybeMessage<QueryLotteryDetailResp>(nullptr);
  }

  QueryLotteryDetailResp* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<QueryLotteryDetailResp>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const QueryLotteryDetailResp& from);
  void MergeFrom(const QueryLotteryDetailResp& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(QueryLotteryDetailResp* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "LotteryProto.QueryLotteryDetailResp";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_Lottery_2eproto);
    return ::descriptor_table_Lottery_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRewardPoolFieldNumber = 6,
    kIconFieldNumber = 7,
    kCartoonFieldNumber = 8,
    kResultCodeFieldNumber = 1,
    kFreeRotateTimesFieldNumber = 2,
    kCooldownFieldNumber = 3,
    kSuperNeedFreeTimesFieldNumber = 4,
    kRotateTypeFieldNumber = 5,
  };
  // repeated .LotteryProto.RewardItem rewardPool = 6;
  int rewardpool_size() const;
  void clear_rewardpool();
  ::LotteryProto::RewardItem* mutable_rewardpool(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::LotteryProto::RewardItem >*
      mutable_rewardpool();
  const ::LotteryProto::RewardItem& rewardpool(int index) const;
  ::LotteryProto::RewardItem* add_rewardpool();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::LotteryProto::RewardItem >&
      rewardpool() const;

  // string icon = 7;
  void clear_icon();
  const std::string& icon() const;
  void set_icon(const std::string& value);
  void set_icon(std::string&& value);
  void set_icon(const char* value);
  void set_icon(const char* value, size_t size);
  std::string* mutable_icon();
  std::string* release_icon();
  void set_allocated_icon(std::string* icon);

  // string cartoon = 8;
  void clear_cartoon();
  const std::string& cartoon() const;
  void set_cartoon(const std::string& value);
  void set_cartoon(std::string&& value);
  void set_cartoon(const char* value);
  void set_cartoon(const char* value, size_t size);
  std::string* mutable_cartoon();
  std::string* release_cartoon();
  void set_allocated_cartoon(std::string* cartoon);

  // sint32 resultCode = 1;
  void clear_resultcode();
  ::PROTOBUF_NAMESPACE_ID::int32 resultcode() const;
  void set_resultcode(::PROTOBUF_NAMESPACE_ID::int32 value);

  // sint32 freeRotateTimes = 2;
  void clear_freerotatetimes();
  ::PROTOBUF_NAMESPACE_ID::int32 freerotatetimes() const;
  void set_freerotatetimes(::PROTOBUF_NAMESPACE_ID::int32 value);

  // sint32 cooldown = 3;
  void clear_cooldown();
  ::PROTOBUF_NAMESPACE_ID::int32 cooldown() const;
  void set_cooldown(::PROTOBUF_NAMESPACE_ID::int32 value);

  // sint32 superNeedFreeTimes = 4;
  void clear_superneedfreetimes();
  ::PROTOBUF_NAMESPACE_ID::int32 superneedfreetimes() const;
  void set_superneedfreetimes(::PROTOBUF_NAMESPACE_ID::int32 value);

  // .LotteryProto.E_LOTTERY_TYPE rotateType = 5;
  void clear_rotatetype();
  ::LotteryProto::E_LOTTERY_TYPE rotatetype() const;
  void set_rotatetype(::LotteryProto::E_LOTTERY_TYPE value);

  // @@protoc_insertion_point(class_scope:LotteryProto.QueryLotteryDetailResp)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::LotteryProto::RewardItem > rewardpool_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr icon_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr cartoon_;
  ::PROTOBUF_NAMESPACE_ID::int32 resultcode_;
  ::PROTOBUF_NAMESPACE_ID::int32 freerotatetimes_;
  ::PROTOBUF_NAMESPACE_ID::int32 cooldown_;
  ::PROTOBUF_NAMESPACE_ID::int32 superneedfreetimes_;
  int rotatetype_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Lottery_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// LotteryReq

// .LotteryProto.E_LOTTERY_TYPE rotateType = 1;
inline void LotteryReq::clear_rotatetype() {
  rotatetype_ = 0;
}
inline ::LotteryProto::E_LOTTERY_TYPE LotteryReq::rotatetype() const {
  // @@protoc_insertion_point(field_get:LotteryProto.LotteryReq.rotateType)
  return static_cast< ::LotteryProto::E_LOTTERY_TYPE >(rotatetype_);
}
inline void LotteryReq::set_rotatetype(::LotteryProto::E_LOTTERY_TYPE value) {
  
  rotatetype_ = value;
  // @@protoc_insertion_point(field_set:LotteryProto.LotteryReq.rotateType)
}

// -------------------------------------------------------------------

// LotteryResp

// sint32 resultCode = 1;
inline void LotteryResp::clear_resultcode() {
  resultcode_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LotteryResp::resultcode() const {
  // @@protoc_insertion_point(field_get:LotteryProto.LotteryResp.resultCode)
  return resultcode_;
}
inline void LotteryResp::set_resultcode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  resultcode_ = value;
  // @@protoc_insertion_point(field_set:LotteryProto.LotteryResp.resultCode)
}

// sint32 rewardId = 2;
inline void LotteryResp::clear_rewardid() {
  rewardid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LotteryResp::rewardid() const {
  // @@protoc_insertion_point(field_get:LotteryProto.LotteryResp.rewardId)
  return rewardid_;
}
inline void LotteryResp::set_rewardid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  rewardid_ = value;
  // @@protoc_insertion_point(field_set:LotteryProto.LotteryResp.rewardId)
}

// -------------------------------------------------------------------

// RewardItem

// sint32 goodsID = 1;
inline void RewardItem::clear_goodsid() {
  goodsid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RewardItem::goodsid() const {
  // @@protoc_insertion_point(field_get:LotteryProto.RewardItem.goodsID)
  return goodsid_;
}
inline void RewardItem::set_goodsid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  goodsid_ = value;
  // @@protoc_insertion_point(field_set:LotteryProto.RewardItem.goodsID)
}

// sint32 count = 2;
inline void RewardItem::clear_count() {
  count_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RewardItem::count() const {
  // @@protoc_insertion_point(field_get:LotteryProto.RewardItem.count)
  return count_;
}
inline void RewardItem::set_count(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  count_ = value;
  // @@protoc_insertion_point(field_set:LotteryProto.RewardItem.count)
}

// sint32 rewardId = 3;
inline void RewardItem::clear_rewardid() {
  rewardid_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RewardItem::rewardid() const {
  // @@protoc_insertion_point(field_get:LotteryProto.RewardItem.rewardId)
  return rewardid_;
}
inline void RewardItem::set_rewardid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  rewardid_ = value;
  // @@protoc_insertion_point(field_set:LotteryProto.RewardItem.rewardId)
}

// -------------------------------------------------------------------

// QueryLotteryDetailResp

// sint32 resultCode = 1;
inline void QueryLotteryDetailResp::clear_resultcode() {
  resultcode_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 QueryLotteryDetailResp::resultcode() const {
  // @@protoc_insertion_point(field_get:LotteryProto.QueryLotteryDetailResp.resultCode)
  return resultcode_;
}
inline void QueryLotteryDetailResp::set_resultcode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  resultcode_ = value;
  // @@protoc_insertion_point(field_set:LotteryProto.QueryLotteryDetailResp.resultCode)
}

// sint32 freeRotateTimes = 2;
inline void QueryLotteryDetailResp::clear_freerotatetimes() {
  freerotatetimes_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 QueryLotteryDetailResp::freerotatetimes() const {
  // @@protoc_insertion_point(field_get:LotteryProto.QueryLotteryDetailResp.freeRotateTimes)
  return freerotatetimes_;
}
inline void QueryLotteryDetailResp::set_freerotatetimes(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  freerotatetimes_ = value;
  // @@protoc_insertion_point(field_set:LotteryProto.QueryLotteryDetailResp.freeRotateTimes)
}

// sint32 cooldown = 3;
inline void QueryLotteryDetailResp::clear_cooldown() {
  cooldown_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 QueryLotteryDetailResp::cooldown() const {
  // @@protoc_insertion_point(field_get:LotteryProto.QueryLotteryDetailResp.cooldown)
  return cooldown_;
}
inline void QueryLotteryDetailResp::set_cooldown(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  cooldown_ = value;
  // @@protoc_insertion_point(field_set:LotteryProto.QueryLotteryDetailResp.cooldown)
}

// sint32 superNeedFreeTimes = 4;
inline void QueryLotteryDetailResp::clear_superneedfreetimes() {
  superneedfreetimes_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 QueryLotteryDetailResp::superneedfreetimes() const {
  // @@protoc_insertion_point(field_get:LotteryProto.QueryLotteryDetailResp.superNeedFreeTimes)
  return superneedfreetimes_;
}
inline void QueryLotteryDetailResp::set_superneedfreetimes(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  superneedfreetimes_ = value;
  // @@protoc_insertion_point(field_set:LotteryProto.QueryLotteryDetailResp.superNeedFreeTimes)
}

// .LotteryProto.E_LOTTERY_TYPE rotateType = 5;
inline void QueryLotteryDetailResp::clear_rotatetype() {
  rotatetype_ = 0;
}
inline ::LotteryProto::E_LOTTERY_TYPE QueryLotteryDetailResp::rotatetype() const {
  // @@protoc_insertion_point(field_get:LotteryProto.QueryLotteryDetailResp.rotateType)
  return static_cast< ::LotteryProto::E_LOTTERY_TYPE >(rotatetype_);
}
inline void QueryLotteryDetailResp::set_rotatetype(::LotteryProto::E_LOTTERY_TYPE value) {
  
  rotatetype_ = value;
  // @@protoc_insertion_point(field_set:LotteryProto.QueryLotteryDetailResp.rotateType)
}

// repeated .LotteryProto.RewardItem rewardPool = 6;
inline int QueryLotteryDetailResp::rewardpool_size() const {
  return rewardpool_.size();
}
inline void QueryLotteryDetailResp::clear_rewardpool() {
  rewardpool_.Clear();
}
inline ::LotteryProto::RewardItem* QueryLotteryDetailResp::mutable_rewardpool(int index) {
  // @@protoc_insertion_point(field_mutable:LotteryProto.QueryLotteryDetailResp.rewardPool)
  return rewardpool_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::LotteryProto::RewardItem >*
QueryLotteryDetailResp::mutable_rewardpool() {
  // @@protoc_insertion_point(field_mutable_list:LotteryProto.QueryLotteryDetailResp.rewardPool)
  return &rewardpool_;
}
inline const ::LotteryProto::RewardItem& QueryLotteryDetailResp::rewardpool(int index) const {
  // @@protoc_insertion_point(field_get:LotteryProto.QueryLotteryDetailResp.rewardPool)
  return rewardpool_.Get(index);
}
inline ::LotteryProto::RewardItem* QueryLotteryDetailResp::add_rewardpool() {
  // @@protoc_insertion_point(field_add:LotteryProto.QueryLotteryDetailResp.rewardPool)
  return rewardpool_.Add();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::LotteryProto::RewardItem >&
QueryLotteryDetailResp::rewardpool() const {
  // @@protoc_insertion_point(field_list:LotteryProto.QueryLotteryDetailResp.rewardPool)
  return rewardpool_;
}

// string icon = 7;
inline void QueryLotteryDetailResp::clear_icon() {
  icon_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& QueryLotteryDetailResp::icon() const {
  // @@protoc_insertion_point(field_get:LotteryProto.QueryLotteryDetailResp.icon)
  return icon_.GetNoArena();
}
inline void QueryLotteryDetailResp::set_icon(const std::string& value) {
  
  icon_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:LotteryProto.QueryLotteryDetailResp.icon)
}
inline void QueryLotteryDetailResp::set_icon(std::string&& value) {
  
  icon_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:LotteryProto.QueryLotteryDetailResp.icon)
}
inline void QueryLotteryDetailResp::set_icon(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  icon_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LotteryProto.QueryLotteryDetailResp.icon)
}
inline void QueryLotteryDetailResp::set_icon(const char* value, size_t size) {
  
  icon_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LotteryProto.QueryLotteryDetailResp.icon)
}
inline std::string* QueryLotteryDetailResp::mutable_icon() {
  
  // @@protoc_insertion_point(field_mutable:LotteryProto.QueryLotteryDetailResp.icon)
  return icon_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* QueryLotteryDetailResp::release_icon() {
  // @@protoc_insertion_point(field_release:LotteryProto.QueryLotteryDetailResp.icon)
  
  return icon_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void QueryLotteryDetailResp::set_allocated_icon(std::string* icon) {
  if (icon != nullptr) {
    
  } else {
    
  }
  icon_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), icon);
  // @@protoc_insertion_point(field_set_allocated:LotteryProto.QueryLotteryDetailResp.icon)
}

// string cartoon = 8;
inline void QueryLotteryDetailResp::clear_cartoon() {
  cartoon_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& QueryLotteryDetailResp::cartoon() const {
  // @@protoc_insertion_point(field_get:LotteryProto.QueryLotteryDetailResp.cartoon)
  return cartoon_.GetNoArena();
}
inline void QueryLotteryDetailResp::set_cartoon(const std::string& value) {
  
  cartoon_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:LotteryProto.QueryLotteryDetailResp.cartoon)
}
inline void QueryLotteryDetailResp::set_cartoon(std::string&& value) {
  
  cartoon_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:LotteryProto.QueryLotteryDetailResp.cartoon)
}
inline void QueryLotteryDetailResp::set_cartoon(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  cartoon_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:LotteryProto.QueryLotteryDetailResp.cartoon)
}
inline void QueryLotteryDetailResp::set_cartoon(const char* value, size_t size) {
  
  cartoon_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:LotteryProto.QueryLotteryDetailResp.cartoon)
}
inline std::string* QueryLotteryDetailResp::mutable_cartoon() {
  
  // @@protoc_insertion_point(field_mutable:LotteryProto.QueryLotteryDetailResp.cartoon)
  return cartoon_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* QueryLotteryDetailResp::release_cartoon() {
  // @@protoc_insertion_point(field_release:LotteryProto.QueryLotteryDetailResp.cartoon)
  
  return cartoon_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void QueryLotteryDetailResp::set_allocated_cartoon(std::string* cartoon) {
  if (cartoon != nullptr) {
    
  } else {
    
  }
  cartoon_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), cartoon);
  // @@protoc_insertion_point(field_set_allocated:LotteryProto.QueryLotteryDetailResp.cartoon)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace LotteryProto

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::LotteryProto::E_LOTTERY_TYPE> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::LotteryProto::E_LOTTERY_TYPE>() {
  return ::LotteryProto::E_LOTTERY_TYPE_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Lottery_2eproto
